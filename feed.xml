<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-03-03T12:15:10+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Trshant’s Blog</title><subtitle>My mostly insane ramblings
</subtitle><author><name>Trshant</name><email>trshant@gmail.com</email></author><entry><title type="html">Building a compiler-part1 AST</title><link href="http://localhost:4000/2019/03/02/Compiler-I-AST.html" rel="alternate" type="text/html" title="Building a compiler-part1 AST" /><published>2019-03-02T19:00:00+05:30</published><updated>2019-03-02T19:00:00+05:30</updated><id>http://localhost:4000/2019/03/02/Compiler-I-AST</id><content type="html" xml:base="http://localhost:4000/2019/03/02/Compiler-I-AST.html">&lt;p&gt;&lt;strong&gt;Building blocks of a compiler&lt;/strong&gt;:
Copied from &lt;a href=&quot;https://www.programcreek.com/2011/02/how-compiler-works/&quot;&gt;https://www.programcreek.com/2011/02/how-compiler-works/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A compiler is a computer program that transforms source code written in a high-level programming language into a lower level language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is what happens in a compiler&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD
classDef className fill:#f9f,stroke:#333,stroke-width:4px;
class I,O className;
I[&quot;Input File&quot;]

I--&amp;gt;A[&quot;Lexical Analysis&quot;]
subgraph Compiler start
subgraph Arriving at AST
A--&amp;gt;B[&quot;Syntax Analysis&quot;]
end
B--&amp;gt;C[&quot;Semantic Analysis&quot;]
C--&amp;gt;D[&quot;IR Generation&quot;]
D--&amp;gt;E[&quot;IR Optimization&quot;]
E--&amp;gt;F[&quot;Code Generation&quot;]
F--&amp;gt;G[&quot;Optimization&quot;]
end
G--&amp;gt;O[&quot;Executable&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This post covers Lexical Analyser and Syntax analyser.&lt;/p&gt;

&lt;p&gt;Below diagram is based on &lt;a href=&quot;https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff&quot;&gt;Vaidehi Joshi’s&lt;/a&gt; awesome post on ASTs:
As she has, we will be using the same example for our input &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; 5+(1*12) &quot;&lt;/code&gt;. This will form a  continuity if you decide to visit her blogpost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lexical Analysis&lt;/strong&gt;
The lexical analyzer breaks the input file or sentence into a series of tokens, by removing or adding any whitespace or comments in the source code. So it should have these stages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram

participant C  as Code   
participant S  as Scanner
participant T  as Tokeniser
participant SA as Syntax Analyser  

C -&amp;gt;&amp;gt; S  : String
Note over C: &quot; 5+(1*12) &quot;
Note over S: Strip text &amp;lt;br/&amp;gt;&quot;5+(1*12)&quot;
S -&amp;gt;&amp;gt; T  : lexemes  
Note over T: Convert to Tokens&amp;lt;br/&amp;gt;[&quot;5&quot;,&quot;+&quot;,&quot;(&quot;,&quot;1&quot;,&quot;*&quot;,&quot;12&quot;,&quot;)&quot;]
T -&amp;gt;&amp;gt; SA : Tokenised    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Syntax Analysis&lt;/strong&gt;
At its very basic, a Syntax analyser converts tokens to a parse tree by looking at a set of rules. This is a simplification so that we can understand the basic functionlity of this stage of a compiler.
There are 2 stages to this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Getting a parse tree out.&lt;/li&gt;
  &lt;li&gt;Optimising the parse tree.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Again, do have a look at &lt;a href=&quot;https://medium.com/basecs/grammatically-rooting-oneself-with-parse-trees-ec9daeda7dad&quot;&gt;Vaidehi Joshi’s&lt;/a&gt; fantastic post on parse trees. Its extremely well written.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
participant T as Lexical Analyser   
participant SA1 as CST
participant SA2 as AST 

T -&amp;gt;&amp;gt; SA1 : Tokenised   
Note over T:[&quot;5&quot;,&quot;+&quot;,&quot;(&quot;,&quot;1&quot;,&quot;*&quot;,&quot;12&quot;,&quot;)&quot;]
Note over SA1: Create Parse Tree&amp;lt;br/&amp;gt;See CST figure below.
SA1  -&amp;gt;&amp;gt; SA2 : CST
Note over SA2: Optimise Parse Tree&amp;lt;br/&amp;gt;See AST figure below.
SA2  -&amp;gt;&amp;gt; Synaptic Analyser: AST 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CST : Concrete Syntax tree&lt;/strong&gt; - So This stage comes up with a parse tree. How does it do that? It looks at the expression and sees which rule it will agree with. This “see which rule it will agree with” bit will depend on which kind of token parsing is being used.
    &lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;  graph TD
      A1[&quot;Exp&quot;]
      A1--&amp;gt;A[5]
      A1--&amp;gt;B[&quot;+&quot;]
      A1--&amp;gt;A2[Exp]
      A2--&amp;gt;C[&quot;(&quot;]
      A2--&amp;gt;A3[&quot;Exp&quot;]
      A2--&amp;gt;G[&quot;)&quot;]
      A3--&amp;gt;D[1]
      A3--&amp;gt;E[&quot;*&quot;]
      A3--&amp;gt;F[12]
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;We can see that the expression we started out with was divided into parts and further into more parts. This above tree tells us how it was divided.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AST : Abstract Syntax tree&lt;/strong&gt; As we can see, the parse tree is fabulous and true to the rules of the language. But its too verbose (too many nodes!). We try and solve that problem with Abstract Syntax tree where we throw out what is not needed and keep the core of the program. The main aim of this part is to reduce the cruft and keep the core of the code as below.
    &lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;  graph TD
      B[&quot;+&quot;]
      B--&amp;gt;A[5]
          B--&amp;gt;E(*)
          E--&amp;gt;D(1)
          E--&amp;gt;F(12)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To understand and see these in action, Do try out &lt;a href=&quot;https://astexplorer.net/&quot;&gt;https://astexplorer.net/&lt;/a&gt;. This site is amazing and will make you see in action building of an AST with code.  Read &lt;a href=&quot;https://blog.buildo.io/a-tour-of-abstract-syntax-trees-906c0574a067&quot;&gt;this&lt;/a&gt; to figure out the why’s and what’s.&lt;/p&gt;

&lt;p&gt;Many thanks to the creators of  &lt;a href=&quot;https://mermaidjs.github.io&quot;&gt;https://mermaidjs.github.io&lt;/a&gt; for the sequence diagram. It is truly a pleasure to work with.&lt;/p&gt;

&lt;p&gt;The next post in this series will be the implementation of this in Typescript.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTM2NjM3MDQyMSwxNTgwNzYzMTQ4XX0=
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant</name><email>trshant@gmail.com</email></author><category term="CompSci" /><category term="compilerTheory" /><category term="AST" /><summary type="html">Building blocks of a compiler: Copied from https://www.programcreek.com/2011/02/how-compiler-works/ A compiler is a computer program that transforms source code written in a high-level programming language into a lower level language. Here is what happens in a compiler graph TD classDef className fill:#f9f,stroke:#333,stroke-width:4px; class I,O className; I[&quot;Input File&quot;] I--&amp;gt;A[&quot;Lexical Analysis&quot;] subgraph Compiler start subgraph Arriving at AST A--&amp;gt;B[&quot;Syntax Analysis&quot;] end B--&amp;gt;C[&quot;Semantic Analysis&quot;] C--&amp;gt;D[&quot;IR Generation&quot;] D--&amp;gt;E[&quot;IR Optimization&quot;] E--&amp;gt;F[&quot;Code Generation&quot;] F--&amp;gt;G[&quot;Optimization&quot;] end G--&amp;gt;O[&quot;Executable&quot;] This post covers Lexical Analyser and Syntax analyser. Below diagram is based on Vaidehi Joshi’s awesome post on ASTs: As she has, we will be using the same example for our input &quot; 5+(1*12) &quot;. This will form a continuity if you decide to visit her blogpost. Lexical Analysis The lexical analyzer breaks the input file or sentence into a series of tokens, by removing or adding any whitespace or comments in the source code. So it should have these stages: sequenceDiagram participant C as Code participant S as Scanner participant T as Tokeniser participant SA as Syntax Analyser C -&amp;gt;&amp;gt; S : String Note over C: &quot; 5+(1*12) &quot; Note over S: Strip text &amp;lt;br/&amp;gt;&quot;5+(1*12)&quot; S -&amp;gt;&amp;gt; T : lexemes Note over T: Convert to Tokens&amp;lt;br/&amp;gt;[&quot;5&quot;,&quot;+&quot;,&quot;(&quot;,&quot;1&quot;,&quot;*&quot;,&quot;12&quot;,&quot;)&quot;] T -&amp;gt;&amp;gt; SA : Tokenised Syntax Analysis At its very basic, a Syntax analyser converts tokens to a parse tree by looking at a set of rules. This is a simplification so that we can understand the basic functionlity of this stage of a compiler. There are 2 stages to this: Getting a parse tree out. Optimising the parse tree. Again, do have a look at Vaidehi Joshi’s fantastic post on parse trees. Its extremely well written. sequenceDiagram participant T as Lexical Analyser participant SA1 as CST participant SA2 as AST T -&amp;gt;&amp;gt; SA1 : Tokenised Note over T:[&quot;5&quot;,&quot;+&quot;,&quot;(&quot;,&quot;1&quot;,&quot;*&quot;,&quot;12&quot;,&quot;)&quot;] Note over SA1: Create Parse Tree&amp;lt;br/&amp;gt;See CST figure below. SA1 -&amp;gt;&amp;gt; SA2 : CST Note over SA2: Optimise Parse Tree&amp;lt;br/&amp;gt;See AST figure below. SA2 -&amp;gt;&amp;gt; Synaptic Analyser: AST CST : Concrete Syntax tree - So This stage comes up with a parse tree. How does it do that? It looks at the expression and sees which rule it will agree with. This “see which rule it will agree with” bit will depend on which kind of token parsing is being used. graph TD A1[&quot;Exp&quot;] A1--&amp;gt;A[5] A1--&amp;gt;B[&quot;+&quot;] A1--&amp;gt;A2[Exp] A2--&amp;gt;C[&quot;(&quot;] A2--&amp;gt;A3[&quot;Exp&quot;] A2--&amp;gt;G[&quot;)&quot;] A3--&amp;gt;D[1] A3--&amp;gt;E[&quot;*&quot;] A3--&amp;gt;F[12] We can see that the expression we started out with was divided into parts and further into more parts. This above tree tells us how it was divided. AST : Abstract Syntax tree As we can see, the parse tree is fabulous and true to the rules of the language. But its too verbose (too many nodes!). We try and solve that problem with Abstract Syntax tree where we throw out what is not needed and keep the core of the program. The main aim of this part is to reduce the cruft and keep the core of the code as below. graph TD B[&quot;+&quot;] B--&amp;gt;A[5] B--&amp;gt;E(*) E--&amp;gt;D(1) E--&amp;gt;F(12) To understand and see these in action, Do try out https://astexplorer.net/. This site is amazing and will make you see in action building of an AST with code. Read this to figure out the why’s and what’s. Many thanks to the creators of https://mermaidjs.github.io for the sequence diagram. It is truly a pleasure to work with. The next post in this series will be the implementation of this in Typescript. Written with StackEdit.</summary></entry><entry><title type="html">Implementing A Bloom Filter</title><link href="http://localhost:4000/2019/02/05/bloom-filter.html" rel="alternate" type="text/html" title="Implementing A Bloom Filter" /><published>2019-02-05T07:51:43+05:30</published><updated>2019-02-05T07:51:43+05:30</updated><id>http://localhost:4000/2019/02/05/bloom-filter</id><content type="html" xml:base="http://localhost:4000/2019/02/05/bloom-filter.html">&lt;p&gt;A bloom filter is a data structure which allows the server to sync data with a client with low data consumption. Another usecase is to find out uniqueness of the data. &lt;a href=&quot;https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/&quot;&gt;Geekforgeeks&lt;/a&gt; have a pretty good explanation of bloom filters.&lt;/p&gt;

&lt;p&gt;My post is for syncing the data from the server to client. I am assuming that the data on the client is already updating the server as and when the data is entered. The problem statement is not the unavailability or low availability of internet. It is to minimise the syncing operation involved.&lt;/p&gt;

&lt;p&gt;The master hash is the ANDed product of all the individual hashes. The hashing function used here is the murmur hash which has great speed improvements over the normally used  SHA256. In NodeJS, this is how we use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writing a small proof of concept with existing libraries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://www.npmjs.com/package/murmurhash-native&quot;&gt;Murmurhash-native&lt;/a&gt;’s npm page&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'murmurhash-native'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hash me!'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2061152078&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, using the same package, Lets hash a few strings:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'murmurhash-native'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hash me!'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2061152078&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hash2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'do me too'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3728646459&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we need to OR it since we need all the bits set from all the hashes. ORing it all together, we get:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hash2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; Final hash : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4278103935&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hence now we have the masterhash.&lt;/p&gt;

&lt;p&gt;Now we need to create a few more hashes to check against the master hash.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hash3&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'not me!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1542629515&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hash4&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'do me too'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3728646459&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to check if the bits are set both in the individual hash as well as the master hash.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;checkTheHashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//console.log(masterHash, hashToCheck, check);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;checking the hashes…&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;checkTheHashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; checking hash &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;not me!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; (should be false) : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;checkTheHashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; checking hash &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;do me too&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; (should be true): &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now since i know it works, let me put it all in a class, so I dont pollute the global namespace.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bloomFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;hashDataPoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dataString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dataString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;checkIfPresent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringToCheck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hashDataPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StringToCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I am going to use this class later.&lt;/p&gt;

&lt;p&gt;As we can see, it is quite useful for checking uniqueness and availability of the data, depending on the answer expected is positive or negative.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;As we are concerned with syncing data between the server and client.&lt;/p&gt;

&lt;p&gt;Here is how the interaction between the client/server will take place:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
Client -&amp;gt;&amp;gt; Server: Hi! here's my master hash (CMH) with the last time synced

Note over Server,Client: 1. Check each data point against &amp;lt;br/&amp;gt;individual hashes.&amp;lt;br/&amp;gt;2. Collect all the ones where the bits&amp;lt;br/&amp;gt; dont match.&amp;lt;br/&amp;gt;3. Send the Collected data points &amp;lt;br/&amp;gt;back to the client with its own&amp;lt;br/&amp;gt; master hash (SMH).

Server -&amp;gt;&amp;gt; Client: There you go....
Client -&amp;gt;&amp;gt; Client : Updates Itself
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the server itself consists of 2 parts. the web server and the database server. In the code examples above we saw that we can use the murmurhash to update the hash probably in a field in the same table. Along with this, we need to continuously update the master hash with each insert or update, periodically refreshing the masterhash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT * FROM table_name HAVING hash_field_value &amp;amp; CMH &amp;lt;&amp;gt; hash_field_value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above SQL will return only those rows from the tablename which are not there or updated in the client system.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Some reading:
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTkwODQ0NzYzNF19
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant</name><email>trshant@gmail.com</email></author><category term="Algorithm" /><category term="BloomFilter" /><summary type="html">A bloom filter is a data structure which allows the server to sync data with a client with low data consumption. Another usecase is to find out uniqueness of the data. Geekforgeeks have a pretty good explanation of bloom filters. My post is for syncing the data from the server to client. I am assuming that the data on the client is already updating the server as and when the data is entered. The problem statement is not the unavailability or low availability of internet. It is to minimise the syncing operation involved. The master hash is the ANDed product of all the individual hashes. The hashing function used here is the murmur hash which has great speed improvements over the normally used SHA256. In NodeJS, this is how we use it. Writing a small proof of concept with existing libraries From Murmurhash-native’s npm page var murmurHash = require('murmurhash-native').murmurHash murmurHash( 'hash me!' ) // 2061152078 Now, using the same package, Lets hash a few strings: var murmurHash = require('murmurhash-native').murmurHash var hash = murmurHash( 'hash me!' ) // 2061152078 console.log( hash ); var hash2 = murmurHash('do me too') // 3728646459 console.log(hash2); Now we need to OR it since we need all the bits set from all the hashes. ORing it all together, we get: var oredhash = hash &amp;gt;&amp;gt;&amp;gt; 0 | hash2 &amp;gt;&amp;gt;&amp;gt; 0 ; oredhash = oredhash &amp;gt;&amp;gt;&amp;gt; 0; console.log(&quot; Final hash : &quot;,oredhash); // 4278103935 Hence now we have the masterhash. Now we need to create a few more hashes to check against the master hash. var hash3 = murmurHash('not me!') &amp;gt;&amp;gt;&amp;gt; 0 console.log(hash3); //1542629515 var hash4 = murmurHash('do me too') &amp;gt;&amp;gt;&amp;gt; 0 console.log(hash4); // 3728646459 Now we need to check if the bits are set both in the individual hash as well as the master hash. function checkTheHashes( masterHash , hashToCheck ){ var check = (masterHash &amp;amp; hashToCheck) &amp;gt;&amp;gt;&amp;gt; 0; //console.log(masterHash, hashToCheck, check); if (check == hashToCheck) { return true; } else { return false; } } checking the hashes… check = checkTheHashes(oredhash, hash3); console.log(&quot; checking hash \&quot;not me!\&quot; (should be false) : &quot;,check); // false check = checkTheHashes(oredhash, hash4); console.log(&quot; checking hash \&quot;do me too\&quot; (should be true): &quot;,check); // true Now since i know it works, let me put it all in a class, so I dont pollute the global namespace. var bloomFilter = { masterHash : null, hashDataPoint : function( dataString ){ hash = murmurHash( dataString ) &amp;gt;&amp;gt;&amp;gt; 0 if( !isNull( masterHash ) ){ this,masterHash = this.masterHash | hash ; } else { this.masterHash = hash; } }, checkIfPresent : function( StringToCheck ){ hashToCheck = this.hashDataPoint(StringToCheck); var check = ( this.masterHash &amp;amp; hashToCheck) &amp;gt;&amp;gt;&amp;gt; 0; if (check == hashToCheck) { return true; } else { return false; } } } I am going to use this class later. As we can see, it is quite useful for checking uniqueness and availability of the data, depending on the answer expected is positive or negative. As we are concerned with syncing data between the server and client. Here is how the interaction between the client/server will take place: sequenceDiagram Client -&amp;gt;&amp;gt; Server: Hi! here's my master hash (CMH) with the last time synced Note over Server,Client: 1. Check each data point against &amp;lt;br/&amp;gt;individual hashes.&amp;lt;br/&amp;gt;2. Collect all the ones where the bits&amp;lt;br/&amp;gt; dont match.&amp;lt;br/&amp;gt;3. Send the Collected data points &amp;lt;br/&amp;gt;back to the client with its own&amp;lt;br/&amp;gt; master hash (SMH). Server -&amp;gt;&amp;gt; Client: There you go.... Client -&amp;gt;&amp;gt; Client : Updates Itself However, the server itself consists of 2 parts. the web server and the database server. In the code examples above we saw that we can use the murmurhash to update the hash probably in a field in the same table. Along with this, we need to continuously update the master hash with each insert or update, periodically refreshing the masterhash. SELECT * FROM table_name HAVING hash_field_value &amp;amp; CMH &amp;lt;&amp;gt; hash_field_value The above SQL will return only those rows from the tablename which are not there or updated in the client system. Some reading: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators Written with StackEdit.</summary></entry><entry><title type="html">A note on Docker.</title><link href="http://localhost:4000/2019/01/27/A-note-on-docker.html" rel="alternate" type="text/html" title="A note on Docker." /><published>2019-01-27T19:00:00+05:30</published><updated>2019-01-27T19:00:00+05:30</updated><id>http://localhost:4000/2019/01/27/A-note-on-docker</id><content type="html" xml:base="http://localhost:4000/2019/01/27/A-note-on-docker.html">&lt;p&gt;Docker is a buzzword right now.&lt;br /&gt;
It is a lightweight virtualisation system, which does not add to your system and maintains developer sanity.&lt;br /&gt;
Since its not a full blown VM, git handles things beautifully. your configured dev environment can be moved to the production system, setting only the environment variable in place for the respective production/test/dev systems. And you get to save some HDD space, which is also quite expensive.&lt;br /&gt;
Basically, you are leaving nothing to chance. And using kubernetes, you can maintain all your containers.&lt;br /&gt;
Before we go into the article, we both need to know what I will only be explaining a few key concepts in the docker world. Once we understand these, we can go forward to learning about them.&lt;br /&gt;
The main terms to understand here are:&lt;br /&gt;
&lt;strong&gt;1. files&lt;/strong&gt; : These are the files you need dockerised.&lt;br /&gt;
&lt;strong&gt;2. images&lt;/strong&gt; : These are the systems you want to encapsulate the files in.  &lt;br /&gt;
&lt;strong&gt;3. container&lt;/strong&gt; : These are what we build using the images and files.&lt;br /&gt;
Simple enough, I suppose!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTMyOTE2MzAxMCwxNTMyNTcyNDEyLC03Nj
c5OTY0MTgsLTEzNDY0MjU4ODldfQ==
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant</name><email>trshant@gmail.com</email></author><category term="programming" /><category term="softwareEngineering" /><category term="docker" /><summary type="html">Docker is a buzzword right now. It is a lightweight virtualisation system, which does not add to your system and maintains developer sanity. Since its not a full blown VM, git handles things beautifully. your configured dev environment can be moved to the production system, setting only the environment variable in place for the respective production/test/dev systems. And you get to save some HDD space, which is also quite expensive. Basically, you are leaving nothing to chance. And using kubernetes, you can maintain all your containers. Before we go into the article, we both need to know what I will only be explaining a few key concepts in the docker world. Once we understand these, we can go forward to learning about them. The main terms to understand here are: 1. files : These are the files you need dockerised. 2. images : These are the systems you want to encapsulate the files in. 3. container : These are what we build using the images and files. Simple enough, I suppose! Written with StackEdit.</summary></entry><entry><title type="html">Noun and verb based programming</title><link href="http://localhost:4000/2018/11/15/Noun-and-Verb-based-programming.html" rel="alternate" type="text/html" title="Noun and verb based programming" /><published>2018-11-15T19:00:00+05:30</published><updated>2018-11-15T19:00:00+05:30</updated><id>http://localhost:4000/2018/11/15/Noun-and-Verb-based-programming</id><content type="html" xml:base="http://localhost:4000/2018/11/15/Noun-and-Verb-based-programming.html">&lt;p&gt;Today i came to know of a new thing and quite frankly, it blew my mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thinking in terms of verbs and nouns&lt;/strong&gt;: This fantabulous idea was spoken to me by my mentor this evening. its also there on the web&lt;sup id=&quot;fnref:vnp&quot;&gt;&lt;a href=&quot;#fn:vnp&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;so what does this mean?
consider this requirement: &lt;em&gt;we need to add a additional phone number to a user.&lt;/em&gt;
so here we have verbs:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;add&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;nouns:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;user&lt;/li&gt;
  &lt;li&gt;additional phone number&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so we can add a new variable ‘additional phone number’ to a ‘user’ class and a new method to change this variable ‘add’. This is definitely something to understand how to design your classes and methods to interact with other classes. 
another important use would be to  change contexts while programming. see above. the program here is written with reference to the user, i.e., noun based, and keeping the verb as the context, we program the nouns around it. but we can also write atomic functions where the noun is the context and the verb is passed to it. This is a functional programming paradigm and can ease the software design process there too.&lt;/p&gt;

&lt;p&gt;Do read the footnote link&lt;sup id=&quot;fnref:vnp:1&quot;&gt;&lt;a href=&quot;#fn:vnp&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. It explains a lot more than my post does.&lt;/p&gt;

&lt;p&gt;Also, if you are in the mood for some more reading and nostalgia, jead over to the &lt;a href=&quot;https://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html&quot;&gt;Execution in the kingdom of nouns&lt;/a&gt;.&lt;/p&gt;

&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbOTE5NjA0NzE4LC0xNzc4MTkzMzg2LDEwMD
Y4ODAwMzBdfQ==
--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:vnp&quot;&gt;
      &lt;p&gt;(https://wbsimms.com/programming-nouns-verbs/) &lt;a href=&quot;#fnref:vnp&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:vnp:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Trshant</name><email>trshant@gmail.com</email></author><category term="programming" /><category term="softwareEngineering" /><summary type="html">Today i came to know of a new thing and quite frankly, it blew my mind. Thinking in terms of verbs and nouns: This fantabulous idea was spoken to me by my mentor this evening. its also there on the web1. so what does this mean? consider this requirement: we need to add a additional phone number to a user. so here we have verbs: add nouns: user additional phone number so we can add a new variable ‘additional phone number’ to a ‘user’ class and a new method to change this variable ‘add’. This is definitely something to understand how to design your classes and methods to interact with other classes. another important use would be to change contexts while programming. see above. the program here is written with reference to the user, i.e., noun based, and keeping the verb as the context, we program the nouns around it. but we can also write atomic functions where the noun is the context and the verb is passed to it. This is a functional programming paradigm and can ease the software design process there too. Do read the footnote link1. It explains a lot more than my post does. Also, if you are in the mood for some more reading and nostalgia, jead over to the Execution in the kingdom of nouns. (https://wbsimms.com/programming-nouns-verbs/) &amp;#8617; &amp;#8617;2</summary></entry><entry><title type="html">Scope and Context in JavaScript</title><link href="http://localhost:4000/2018/11/05/Contexts-in-JavaScript.html" rel="alternate" type="text/html" title="Scope and Context in JavaScript" /><published>2018-11-05T19:00:00+05:30</published><updated>2018-11-05T19:00:00+05:30</updated><id>http://localhost:4000/2018/11/05/Contexts-in-JavaScript</id><content type="html" xml:base="http://localhost:4000/2018/11/05/Contexts-in-JavaScript.html">&lt;p&gt;While there are many, many articles on the topic online &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I just wanted to add my $0.02 to it.&lt;br /&gt;
&lt;strong&gt;scope&lt;/strong&gt; is the visibility of the variable. Think of it being in the “line of sight”, where line of sight is on the same level or below.&lt;br /&gt;
&lt;strong&gt;context&lt;/strong&gt; means the dependence of the variable on being in an environment. This is used for methods in objects mainly, since the context can change for every instance of the object.&lt;/p&gt;

&lt;p&gt;However, we can change the context for any method by using the call or apply function. Do go through  &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; - its fun and will give you intuition as to scope and contexts .&lt;/p&gt;

&lt;p&gt;Also, i would like to mention that &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; and &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; helped a lot in making this post look kind of academic.&lt;/p&gt;

&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTE2ODMxNjcyNTEsLTIwMzYwMDc0NzksLT
IwMjAyMjU4MDBdfQ==
--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;just one of the many! &lt;a href=&quot;https://blog.kevinchisholm.com/javascript/difference-between-scope-and-context/&quot;&gt;What is the Difference Between Scope and Context in JavaScript?&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://johnresig.com/apps/learn/&quot;&gt;John Resig’s Learning Advanced JavaScript &lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.chriskrycho.com/2015/academic-markdown-and-citations.html&quot;&gt;Academic markdown and citations&lt;/a&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.markdownguide.org/cheat-sheet/&quot;&gt;Markdown cheatsheet&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Trshant</name><email>trshant@gmail.com</email></author><category term="JavaScript" /><summary type="html">While there are many, many articles on the topic online 1, I just wanted to add my $0.02 to it. scope is the visibility of the variable. Think of it being in the “line of sight”, where line of sight is on the same level or below. context means the dependence of the variable on being in an environment. This is used for methods in objects mainly, since the context can change for every instance of the object. However, we can change the context for any method by using the call or apply function. Do go through 2 - its fun and will give you intuition as to scope and contexts . Also, i would like to mention that 3 and 4 helped a lot in making this post look kind of academic. just one of the many! What is the Difference Between Scope and Context in JavaScript? &amp;#8617; John Resig’s Learning Advanced JavaScript  &amp;#8617; Academic markdown and citations. &amp;#8617; Markdown cheatsheet &amp;#8617;</summary></entry><entry><title type="html">Code Snippets for data preprocessing using Pandas - Part 1</title><link href="http://localhost:4000/2018/10/21/Tips-for-preprocessing-data-part-1.html" rel="alternate" type="text/html" title="Code Snippets for data preprocessing using Pandas - Part 1" /><published>2018-10-21T07:51:43+05:30</published><updated>2018-10-21T07:51:43+05:30</updated><id>http://localhost:4000/2018/10/21/Tips-for-preprocessing-data-part-1</id><content type="html" xml:base="http://localhost:4000/2018/10/21/Tips-for-preprocessing-data-part-1.html">&lt;p&gt;This post will be all about processing data using pandas.&lt;/p&gt;

&lt;p&gt;Use this to read CSVs into a dataframe&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df = pd.read_csv('train.csv')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, in case you need to prepare a DataFrame and have been unfortunate enough to get a CSV file with no headers, then this is the way to go&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df = pd.read_csv('file_name.csv', header = None, names = ['labels','you','want','to','give'] )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is one very usable function to see which data is empty or null&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;missing_data_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;missing_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Total'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Percent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missing_data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you see any empty data you can fill it in with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df['column_name'].fillna(1000, inplace=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dropping a column is easy&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df.drop('column_name', axis=1, inplace=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dropping row/s if a column is blank/null&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df.drop(df[pd.isnull(df['Embarked'])].index, inplace=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can make columns categorical ( converting ‘male’ and ‘female’ to 0 and 1 ) without too much trouble&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df['Sex'] = pd.Categorical(df['Sex'])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However this wont be seen easily till you  do this bit&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df = pd.get_dummies(df, drop_first=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the dataframe:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df.head(optional number of rows you want to see)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTc5MDQ0Mzk2OV19
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant</name><email>trshant@gmail.com</email></author><category term="BigData" /><category term="pandas" /><category term="CodeSnippets" /><summary type="html">This post will be all about processing data using pandas. Use this to read CSVs into a dataframe df = pd.read_csv('train.csv') However, in case you need to prepare a DataFrame and have been unfortunate enough to get a CSV file with no headers, then this is the way to go df = pd.read_csv('file_name.csv', header = None, names = ['labels','you','want','to','give'] ) This is one very usable function to see which data is empty or null def missing_data_table(df): total = df.isnull().sum().sort_values(ascending=False) percent = (df.isnull().sum()/df.isnull().count()).sort_values(ascending=False) missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent']) return missing_data If you see any empty data you can fill it in with df['column_name'].fillna(1000, inplace=True) Dropping a column is easy df.drop('column_name', axis=1, inplace=True) Dropping row/s if a column is blank/null df.drop(df[pd.isnull(df['Embarked'])].index, inplace=True) We can make columns categorical ( converting ‘male’ and ‘female’ to 0 and 1 ) without too much trouble df['Sex'] = pd.Categorical(df['Sex']) However this wont be seen easily till you do this bit df = pd.get_dummies(df, drop_first=True) See the dataframe: df.head(optional number of rows you want to see) Written with StackEdit.</summary></entry><entry><title type="html">Code snippets for ML using Scikit-Learn - Part 1</title><link href="http://localhost:4000/2018/10/20/tips-for-ML-part-1.html" rel="alternate" type="text/html" title="Code snippets for ML using Scikit-Learn - Part 1" /><published>2018-10-20T07:51:43+05:30</published><updated>2018-10-20T07:51:43+05:30</updated><id>http://localhost:4000/2018/10/20/tips-for-ML-part-1</id><content type="html" xml:base="http://localhost:4000/2018/10/20/tips-for-ML-part-1.html">&lt;p&gt;This is a page where i will be putting in things i learned while starting off again in ML.&lt;br /&gt;
I am using scikit-learn to do my ml this time and am trying to go through ML in as small a timeframe as possible.
I have been learning about linear and logistic regression.
The correct ones to use in both the cases are &lt;code class=&quot;highlighter-rouge&quot;&gt;from sklearn.linear_model    import LinearRegression&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;from sklearn.linear_model import LogisticRegression&lt;/code&gt; which is intiutive.
This is the bit of code that matters&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;linreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;linreg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;logreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogisticRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'liblinear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multi_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ovr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_jobs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logreg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Post this, we can do a predict and see how the model behaves.&lt;/p&gt;

&lt;p&gt;Have a look at this repo’s 2 pages to see what i did using the above code.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTA2NTY5Mjk4NF19
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant</name><email>trshant@gmail.com</email></author><category term="MachineLearning" /><category term="AI/ML" /><category term="CodeSnippets" /><summary type="html">This is a page where i will be putting in things i learned while starting off again in ML. I am using scikit-learn to do my ml this time and am trying to go through ML in as small a timeframe as possible. I have been learning about linear and logistic regression. The correct ones to use in both the cases are from sklearn.linear_model import LinearRegression and from sklearn.linear_model import LogisticRegression which is intiutive. This is the bit of code that matters linreg = LinearRegression().fit( X_train , y_train ) linreg.score( X_test , y_test ) and logreg = LogisticRegression( solver='liblinear',multi_class='ovr',n_jobs=1 ) logreg.fit(X_train, y_train) Post this, we can do a predict and see how the model behaves. Have a look at this repo’s 2 pages to see what i did using the above code. Written with StackEdit.</summary></entry><entry><title type="html">A dive into UI javascript frameworks - Part 2</title><link href="http://localhost:4000/2018/07/05/A-Dive-into-ui-javascript-frameworks-part-2.html" rel="alternate" type="text/html" title="A dive into UI javascript frameworks - Part 2" /><published>2018-07-05T01:21:43+05:30</published><updated>2018-07-05T01:21:43+05:30</updated><id>http://localhost:4000/2018/07/05/A-Dive-into-ui-javascript-frameworks-part-2</id><content type="html" xml:base="http://localhost:4000/2018/07/05/A-Dive-into-ui-javascript-frameworks-part-2.html">&lt;p&gt;In this post I will be laying out an idea of how to build a front page for a blog using the components, instances laid out in my previous post, using directives to achieve our goal. 
But I will need to understand the idea behind this so This post will be about learning and be testing things out, this will help me in taking good decisions finishing the blog code. 
Along the way, I will be writing code to test my ideas. So, writing a small page to test my code, I begin with forking the hello world example from the &lt;a href=&quot;https://vuejs.org/v2/guide/&quot;&gt;official guide&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;My first Vue app&amp;lt;/title&amp;gt;
  &amp;lt;!-- development version, includes helpful console warnings --&amp;gt;
  &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;app&quot;&amp;gt;
    
  &amp;lt;/div&amp;gt;

  &amp;lt;script&amp;gt;
    var app = new Vue({
      el: '#app',
      data: {
        message: 'Hello Vue!'
      }
    })
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if you copy that into an HTML file and then open it, you will be greeted with a “Hello Vue!” message. If you open your console log and type in app.message = “Hello Trshant!”, you will find that the message has changed to whatever you typed. This means that the data in the app is coupled with the  part of the HTML; and if we change the data using ajax, it will make the necessary change in the presentation. &lt;em&gt;awesome!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Moving on, I have copied this lovely todo app made in Vue and forked it -&amp;gt; &lt;a href=&quot;https://jsfiddle.net/trshant/oqka1f8p/1/&quot;&gt;There you go&lt;/a&gt;. Do please open it and go thru the code and the example itself. I will go through this and explain the functionality of every line. my motive here is to understand the need for bindings and presentation logic.&lt;/p&gt;

&lt;p&gt;I will be going thru the HTML and then the JS. But before we do that, we will ask ourselves the important questions - The Objective/Brief of our task.&lt;/p&gt;

&lt;p&gt;We want to build a small to-do app. This should have a text box and a button next to it, on the top. when you type in something and hit the button or press enter, this should populate underneath, with a checkbox to its left. we also need a delete button. When you click the checkbox, the text should be struck out.&lt;/p&gt;

&lt;p&gt;Since we have some clarity on what we need, we move on to the code. Do have a look:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Main Div Holding our Application Data --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Panel for holding our input --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mark-all&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;areAllSelected&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectAll&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;What do you need to do?&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autofocus&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text-input&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newTask&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:keyup&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enter=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addTask&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clearList&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Clear List&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Unordered list for holding our todo items --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task in taskList&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{done: task.checked}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task.checked&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;removeTask(task)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;X&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This stringifies the contents of the data object and displays it on the page --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The main input with button&lt;/strong&gt; : look at the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;section class=&quot;panel&quot;&amp;gt;&lt;/code&gt; element. So we have a checkbox (which is not in the brief above the code), an input and a button. All this is in HTML..but whats the v-on and v-bind and v-model?&lt;br /&gt;
These are called directives. They are very very important and so, we should understand what they do. These are event listeners and provide binding with the data source or functions that we will build.&lt;br /&gt;
Here, we have a few directives. I will list them and provide an explanation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;v-bind&lt;/strong&gt;: This binds an attribute of the element with the output of a function, which is constantly evaluated, or some data element. here we see &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:checked=&quot;areAllSelected&quot;&lt;/code&gt; - this binds the output of a &lt;em&gt;constantly evaluated function&lt;/em&gt; areAllSelected to the &lt;em&gt;checked&lt;/em&gt; property of the checkbox.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;v-on&lt;/strong&gt;: This is an event listener. This executes a function on the occurrence of that event. &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on:click=&quot;selectAll&quot;&lt;/code&gt; - here the function selectAll is executed when the click event executes on this element. Another instance of the v-on is the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on:keyup.enter=&quot;addTask&quot;&lt;/code&gt;. Intuitively, you can say that this is supposed to execute addTask on the event of the enter button is released.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;v-model&lt;/strong&gt;: This binds the data to the element value when that value is an attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will now go through the rest of the code - the &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; element. We encounter something different here - the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for=&quot;task in taskList&quot;&lt;/code&gt; bit. This is a ‘for’ loop. it loops through each element ( called &lt;em&gt;task&lt;/em&gt; ) in the data &lt;em&gt;taskList&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I think we can now go thru the Javascript and will find it self-explanatory. 
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTIwMzIzMzIyNzVdfQ==
--&gt;&lt;/p&gt;</content><author><name>Trshant</name><email>trshant@gmail.com</email></author><category term="Javascript" /><category term="javascript frameworks" /><category term="VueJS" /><summary type="html">In this post I will be laying out an idea of how to build a front page for a blog using the components, instances laid out in my previous post, using directives to achieve our goal. But I will need to understand the idea behind this so This post will be about learning and be testing things out, this will help me in taking good decisions finishing the blog code. Along the way, I will be writing code to test my ideas. So, writing a small page to test my code, I begin with forking the hello world example from the official guide. &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My first Vue app&amp;lt;/title&amp;gt; &amp;lt;!-- development version, includes helpful console warnings --&amp;gt; &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&quot;app&quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: '#app', data: { message: 'Hello Vue!' } }) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Now, if you copy that into an HTML file and then open it, you will be greeted with a “Hello Vue!” message. If you open your console log and type in app.message = “Hello Trshant!”, you will find that the message has changed to whatever you typed. This means that the data in the app is coupled with the part of the HTML; and if we change the data using ajax, it will make the necessary change in the presentation. awesome! Moving on, I have copied this lovely todo app made in Vue and forked it -&amp;gt; There you go. Do please open it and go thru the code and the example itself. I will go through this and explain the functionality of every line. my motive here is to understand the need for bindings and presentation logic. I will be going thru the HTML and then the JS. But before we do that, we will ask ourselves the important questions - The Objective/Brief of our task. We want to build a small to-do app. This should have a text box and a button next to it, on the top. when you type in something and hit the button or press enter, this should populate underneath, with a checkbox to its left. we also need a delete button. When you click the checkbox, the text should be struck out. Since we have some clarity on what we need, we move on to the code. Do have a look: &amp;lt;!-- Main Div Holding our Application Data --&amp;gt; &amp;lt;div class=&quot;container&quot; id=&quot;todo&quot;&amp;gt; &amp;lt;!-- Panel for holding our input --&amp;gt; &amp;lt;section class=&quot;panel&quot;&amp;gt; &amp;lt;input type=&quot;checkbox&quot; id=&quot;mark-all&quot; v-bind:checked=&quot;areAllSelected&quot; v-on:click=&quot;selectAll&quot;&amp;gt; &amp;lt;input type=&quot;text&quot; placeholder=&quot;What do you need to do?&quot; autofocus class=&quot;text-input&quot; v-model=&quot;newTask&quot; v-on:keyup.enter=&quot;addTask&quot;&amp;gt; &amp;lt;button v-on:click=&quot;clearList&quot;&amp;gt;Clear List&amp;lt;/button&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;!-- Unordered list for holding our todo items --&amp;gt; &amp;lt;ul class=&quot;list&quot;&amp;gt; &amp;lt;li v-for=&quot;task in taskList&quot; v-bind:class=&quot;{done: task.checked}&quot;&amp;gt; &amp;lt;input type=&quot;checkbox&quot; class=&quot;checkbox&quot; v-model=&quot;task.checked&quot;&amp;gt; &amp;lt;label for=&quot;checkbox&quot;&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;button class=&quot;delete&quot; v-on:click=&quot;removeTask(task)&quot;&amp;gt;X&amp;lt;/button&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;!-- This stringifies the contents of the data object and displays it on the page --&amp;gt; &amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;/div&amp;gt; The main input with button : look at the contents of the &amp;lt;section class=&quot;panel&quot;&amp;gt; element. So we have a checkbox (which is not in the brief above the code), an input and a button. All this is in HTML..but whats the v-on and v-bind and v-model? These are called directives. They are very very important and so, we should understand what they do. These are event listeners and provide binding with the data source or functions that we will build. Here, we have a few directives. I will list them and provide an explanation: v-bind: This binds an attribute of the element with the output of a function, which is constantly evaluated, or some data element. here we see v-bind:checked=&quot;areAllSelected&quot; - this binds the output of a constantly evaluated function areAllSelected to the checked property of the checkbox. v-on: This is an event listener. This executes a function on the occurrence of that event. v-on:click=&quot;selectAll&quot; - here the function selectAll is executed when the click event executes on this element. Another instance of the v-on is the v-on:keyup.enter=&quot;addTask&quot;. Intuitively, you can say that this is supposed to execute addTask on the event of the enter button is released. v-model: This binds the data to the element value when that value is an attribute. We will now go through the rest of the code - the ul element. We encounter something different here - the v-for=&quot;task in taskList&quot; bit. This is a ‘for’ loop. it loops through each element ( called task ) in the data taskList. I think we can now go thru the Javascript and will find it self-explanatory.</summary></entry><entry><title type="html">A dive into UI javascript frameworks</title><link href="http://localhost:4000/2018/07/01/A-Dive-into-javascript-ui-frameworks.html" rel="alternate" type="text/html" title="A dive into UI javascript frameworks" /><published>2018-07-01T07:51:43+05:30</published><updated>2018-07-01T07:51:43+05:30</updated><id>http://localhost:4000/2018/07/01/A-Dive-into-javascript-ui-frameworks</id><content type="html" xml:base="http://localhost:4000/2018/07/01/A-Dive-into-javascript-ui-frameworks.html">&lt;p&gt;My motive in writing this is to understand how a client facing JavaScript framework works at a deeper level. This, i believe, will help me understand the underlying system so i can architect the system correctly. Such kind of frameworks are evolved, so the nomenclature and the way of functioning, is almost the same on a superficial level. i will not be going into any code here. i will only be writing it from a 200ft view.&lt;br /&gt;
Recently, i started reading through VueJS and somehow it seems to resonate with me, so i decided to read only the documentation and understand how everything comes together. Below are what i learned.&lt;/p&gt;
&lt;h2 id=&quot;terms-i-should-know-about&quot;&gt;Terms i should know about.&lt;/h2&gt;
&lt;h3 id=&quot;instance&quot;&gt;Instance&lt;/h3&gt;
&lt;p&gt;This provides a context ( or &lt;strong&gt;Scope&lt;/strong&gt; ) for the application to work with. While you can have multiple instances on a page, it mostly is better to use just one since it simplifies things later.&lt;/p&gt;
&lt;h3 id=&quot;component&quot;&gt;Component&lt;/h3&gt;
&lt;p&gt;This can be thought of as a collection of visually separate elements. these can be global or local, and flexibe enough to reuse the same components for different purposes&lt;/p&gt;
&lt;h3 id=&quot;directive&quot;&gt;Directive&lt;/h3&gt;
&lt;p&gt;the logic flow of the data is managed by directives. I will deal with this in the next post where i will be looking at code.&lt;/p&gt;

&lt;h2 id=&quot;an-example&quot;&gt;An example&lt;/h2&gt;
&lt;p&gt;I am going to look at a blog’s front page layout and see if i can make this into a VueJS application. Visually this can be separated into components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HlMWRaK.jpg&quot; alt=&quot;Layout of components&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can see 1 instance, 3 different components, one of which is used 2 times with different data. Just so that we get this right avoiding too much confusion about what goes where, i will concentrate on the components:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;header&lt;/strong&gt; - This is just the header, with a list of links and a banner image.&lt;br /&gt;
&lt;strong&gt;list_posts_with_description&lt;/strong&gt; - This component gives a list of post titles, with a date and description. &lt;br /&gt;
&lt;strong&gt;list_of_post_titles&lt;/strong&gt; - This component gives a list of post titles. it is reused twice. once to show the list using date as the grouping  and the second time using a tag as the grouping.&lt;/p&gt;

&lt;p&gt;In the next post, i will write the code for each of the components.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTEzNjIyOTEwNV19
--&gt;&lt;/p&gt;</content><author><name>Trshant</name><email>trshant@gmail.com</email></author><category term="Javascript" /><category term="JavscriptFrameworks" /><summary type="html">My motive in writing this is to understand how a client facing JavaScript framework works at a deeper level. This, i believe, will help me understand the underlying system so i can architect the system correctly. Such kind of frameworks are evolved, so the nomenclature and the way of functioning, is almost the same on a superficial level. i will not be going into any code here. i will only be writing it from a 200ft view. Recently, i started reading through VueJS and somehow it seems to resonate with me, so i decided to read only the documentation and understand how everything comes together. Below are what i learned. Terms i should know about. Instance This provides a context ( or Scope ) for the application to work with. While you can have multiple instances on a page, it mostly is better to use just one since it simplifies things later. Component This can be thought of as a collection of visually separate elements. these can be global or local, and flexibe enough to reuse the same components for different purposes Directive the logic flow of the data is managed by directives. I will deal with this in the next post where i will be looking at code. An example I am going to look at a blog’s front page layout and see if i can make this into a VueJS application. Visually this can be separated into components. Now we can see 1 instance, 3 different components, one of which is used 2 times with different data. Just so that we get this right avoiding too much confusion about what goes where, i will concentrate on the components: header - This is just the header, with a list of links and a banner image. list_posts_with_description - This component gives a list of post titles, with a date and description. list_of_post_titles - This component gives a list of post titles. it is reused twice. once to show the list using date as the grouping and the second time using a tag as the grouping. In the next post, i will write the code for each of the components.</summary></entry><entry><title type="html">Hello World</title><link href="http://localhost:4000/2018/06/23/Hello-World.html" rel="alternate" type="text/html" title="Hello World" /><published>2018-06-23T06:59:43+05:30</published><updated>2018-06-23T06:59:43+05:30</updated><id>http://localhost:4000/2018/06/23/Hello-World</id><content type="html" xml:base="http://localhost:4000/2018/06/23/Hello-World.html">&lt;p&gt;I have moved my entire blogging to github pages. I am using Hugo, a delightfully simple static file generator.&lt;/p&gt;

&lt;p&gt;I plan on using a small cron on the raspberry pi to post stuff to my trshant.github.io site……atleast thats what i think.&lt;/p&gt;

&lt;h2 id=&quot;on-let-me-see-if-this-saves&quot;&gt;On let me see if this saves&lt;/h2&gt;
&lt;p&gt;This is also a test filewhere i will be trying out &lt;code class=&quot;highlighter-rouge&quot;&gt;newer&lt;/code&gt; things i want to do.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function hello(){
    console.log(&quot;hello world!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;i ❤ this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
        A[AWS Kinesis] --&amp;gt; B[Spark Streaming Application]
        B --&amp;gt; C[AWS S3]
        B --&amp;gt; D[AWS Redshift]
        C -.-&amp;gt; D
&lt;/code&gt;&lt;/pre&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTUyODI3NTI1MV19
--&gt;</content><author><name>Trshant</name><email>trshant@gmail.com</email></author><summary type="html">I have moved my entire blogging to github pages. I am using Hugo, a delightfully simple static file generator. I plan on using a small cron on the raspberry pi to post stuff to my trshant.github.io site……atleast thats what i think. On let me see if this saves This is also a test filewhere i will be trying out newer things i want to do. function hello(){ console.log(&quot;hello world!&quot;); } i ❤ this. graph LR A[AWS Kinesis] --&amp;gt; B[Spark Streaming Application] B --&amp;gt; C[AWS S3] B --&amp;gt; D[AWS Redshift] C -.-&amp;gt; D</summary></entry></feed>