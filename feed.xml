<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://trshant.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://trshant.dev/" rel="alternate" type="text/html" /><updated>2019-09-03T04:39:08+02:00</updated><id>https://trshant.dev/feed.xml</id><title type="html">Trshant’s Ramblings</title><subtitle>Read the blog!
</subtitle><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><entry><title type="html">A small note on λ calculus and Church Encoding</title><link href="https://trshant.dev/2019/09/01/a-small-note-on-lambda-calculus.html" rel="alternate" type="text/html" title="A small note on &amp;lambda; calculus and Church Encoding" /><published>2019-09-01T20:31:43+02:00</published><updated>2019-09-01T20:31:43+02:00</updated><id>https://trshant.dev/2019/09/01/a-small-note-on-lambda-calculus</id><content type="html" xml:base="https://trshant.dev/2019/09/01/a-small-note-on-lambda-calculus.html">&lt;p&gt;Lambda Calculus ( called &lt;strong&gt;λC&lt;/strong&gt; from now on  ) is something that every programmer reads and wonders about at a point of her career.&lt;/p&gt;

&lt;p&gt;From Wikipedia&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Lambda calculus (also written as λ-calculus) is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution. It is a universal model of computation that can be used to simulate any Turing machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;λC&lt;/strong&gt; expresses the process of computation, with just 4 parts:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;single letter variables&lt;/li&gt;
  &lt;li&gt;parantheses ()&lt;/li&gt;
  &lt;li&gt;Lambda λ&lt;/li&gt;
  &lt;li&gt;Dot .&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It uses these 4 parts to write expressions. Let me illustrate this with an example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;( λy.x(yz) )(ab)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the above function ( which is an expression ), the &lt;code class=&quot;highlighter-rouge&quot;&gt;λy&lt;/code&gt; is the head.&lt;code class=&quot;highlighter-rouge&quot;&gt;x(yz)&lt;/code&gt; is the body ( which is an expression ) and &lt;code class=&quot;highlighter-rouge&quot;&gt;ab&lt;/code&gt; which is an argument ( also an expression ).&lt;/p&gt;

&lt;p&gt;Lambda calculus resolves each expression using substitution, starting from the rightmost ( and innermost ) expression.&lt;/p&gt;

&lt;p&gt;But before we dive into that, there is something else I should go into. &lt;strong&gt;Church Numerals&lt;/strong&gt;: Church numerals are the encoded natural numbers ( encoded using chuch encoding ). We can define a church numeral as a higher-order function which takes a single argument function as an argument and returns another single argument function.&lt;/p&gt;

&lt;p&gt;Let us see the numbers and their lambda expression equivalents:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;number&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Lambda expression&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;λf.λx. x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;λf.λx. f x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;λf.λx. f (f x)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;λf.λx. f (f (f x))&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;By looking at the above we can conclude that if 1 is (partially) encoded as a function of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, then 3 is encoded as the same function applied thrice to the same &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;. In other words we could say ‘n’ is encoded as a function ‘f’ composed ‘n’ times. So if we were to write a function that would add 1 to a numeral, it would be just be applying the function one more time (or composing it one more time).&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;SUCC := λn.λf.λx.f (n f x)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since we have defined it, let us see how we can give the &lt;code class=&quot;highlighter-rouge&quot;&gt;SUCC&lt;/code&gt; function &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; as the argument and see if it resolves to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SUCC := (λn.λf.λx.f (n f x))(λf.λx. x)
      = λf.λx.f ( (λf.λx. x) f x)
      = λf.λx.f ( (   λx. x)   x)
      = λf.λx.f (              x)
      = λf.λx.f x 
      = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, we resolve for &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SUCC := (λn.λf.λx.f (n f x))(λf.λx.f x)
      = λf.λx.f ( (λf.λx.f x) f x)
      = λf.λx.f ( (   λx.f x)   x)
      = λf.λx.f ( (      f x)   x)
      = λf.λx.f (f x) 
      = 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now since we have defined an increment function (&lt;code class=&quot;highlighter-rouge&quot;&gt;SUCC&lt;/code&gt;), we should define a function that adds 2 numbers. Going with the ‘composing’ idea, we can say that adding 2 mumbers &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; could be defined as applying a function &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; times to the same function &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; applied &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; times. Writing that down, we get:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ADD := λm.λf.λn.λx.m f( n f (x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Multiplication two numbers &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; would be defined as applying a function &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; times and then doing this &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; times over. Defining things in λC, we get:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;MUL :⇔ λa.λb.λc.a(bc)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets try and resolve this one multiplying 2 and 3
MUL 2 3 := ( λa.λb.λc.a(bc) ) ( λg.λx. g (g x) ) ( λh.λx. h (h (h x)) )&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MUL 2 3 := ( λa.λb.λc.a(bc) ) ( λg.λx. g (g x) ) ( λh.λx. h (h (h x)))
         = ( λc . ( λg.λx. g (g x) )( ( λh.λx. h (h (h x))) c ) )
         = ( λc . ( λg.λx. g (g x) )(      λx. c (c (c x)))     )
         = ( λc . (     λx. (λx. c (c (c x))) ((λx. c (c (c x))) x) )     )
         = ( λc . (     λx. (λx. c (c (c x))) ( c (c (c x))))     )
         = λc . λx. (c (c (c ( c (c (c x))))))      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we see how, just by the process of resolving using substitution, we get the final expression where the form is the encoding for 6.&lt;/p&gt;

&lt;p&gt;We still have the subtraction to defined, But that will be another post - This one took quite some time to wrap my head around!&lt;/p&gt;

&lt;p&gt;Read More:&lt;br /&gt;
&lt;a href=&quot;http://vanderwijk.info/blog/pure-lambda-calculus-python/&quot;&gt;λ calculus in python code&lt;/a&gt;: this &lt;a href=&quot;http://matt.might.net/articles/python-church-y-combinator/&quot;&gt;link&lt;/a&gt;
will explain all the code better.&lt;/p&gt;

&lt;p&gt;Main References:&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Church_encoding&quot;&gt;Wikipedia: Church Encoding&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_calculus&quot;&gt;Wikipedia: Lambda Calculus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Links I regularly went back to when I needed some gentle explanations ( when Wikipedia got too terse for me! ):&lt;br /&gt;
&lt;a href=&quot;http://bach.ai/lambda-calculus-for-absolute-dummies/&quot;&gt;λC for dummies&lt;/a&gt;: Amazingly well written note on λC.&lt;br /&gt;
&lt;a href=&quot;https://math.stackexchange.com/a/595576&quot;&gt;Stackoverflow answer for explanation of multiplication in λC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other Interesting Reads:&lt;br /&gt;
&lt;a href=&quot;https://cstheory.stackexchange.com/a/36601&quot;&gt;To understand λC in poetry&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/1.LAMBDA-CALCULUS.html&quot;&gt;Class notes onλC&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt; and Notable and Vim.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTkzODkxNTgzMSwtNzc2MTYwNzQ1LC04MT
gzMDYwNjMsLTIwMTM1OTM2MTMsMTYxMTQyODgxOSwzODUyMzgz
NDddfQ==
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><category term="computation" /><category term="ComputerScienceTheory" /><category term="lambdaCalculus" /><summary type="html">Lambda Calculus ( called λC from now on ) is something that every programmer reads and wonders about at a point of her career. From Wikipedia Lambda calculus (also written as λ-calculus) is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution. It is a universal model of computation that can be used to simulate any Turing machine. λC expresses the process of computation, with just 4 parts: single letter variables parantheses () Lambda λ Dot . It uses these 4 parts to write expressions. Let me illustrate this with an example: ( λy.x(yz) )(ab) In the above function ( which is an expression ), the λy is the head.x(yz) is the body ( which is an expression ) and ab which is an argument ( also an expression ). Lambda calculus resolves each expression using substitution, starting from the rightmost ( and innermost ) expression. But before we dive into that, there is something else I should go into. Church Numerals: Church numerals are the encoded natural numbers ( encoded using chuch encoding ). We can define a church numeral as a higher-order function which takes a single argument function as an argument and returns another single argument function. Let us see the numbers and their lambda expression equivalents: number Lambda expression 0 λf.λx. x 1 λf.λx. f x 2 λf.λx. f (f x) 3 λf.λx. f (f (f x)) By looking at the above we can conclude that if 1 is (partially) encoded as a function of x, then 3 is encoded as the same function applied thrice to the same x. In other words we could say ‘n’ is encoded as a function ‘f’ composed ‘n’ times. So if we were to write a function that would add 1 to a numeral, it would be just be applying the function one more time (or composing it one more time). SUCC := λn.λf.λx.f (n f x) Since we have defined it, let us see how we can give the SUCC function 0 as the argument and see if it resolves to 1. SUCC := (λn.λf.λx.f (n f x))(λf.λx. x) = λf.λx.f ( (λf.λx. x) f x) = λf.λx.f ( ( λx. x) x) = λf.λx.f ( x) = λf.λx.f x = 1 Similarly, we resolve for 2 SUCC := (λn.λf.λx.f (n f x))(λf.λx.f x) = λf.λx.f ( (λf.λx.f x) f x) = λf.λx.f ( ( λx.f x) x) = λf.λx.f ( ( f x) x) = λf.λx.f (f x) = 2 Now since we have defined an increment function (SUCC), we should define a function that adds 2 numbers. Going with the ‘composing’ idea, we can say that adding 2 mumbers m and n could be defined as applying a function f, n times to the same function f applied m times. Writing that down, we get: ADD := λm.λf.λn.λx.m f( n f (x)) Multiplication two numbers a and b would be defined as applying a function f, n times and then doing this m times over. Defining things in λC, we get: MUL :⇔ λa.λb.λc.a(bc) Lets try and resolve this one multiplying 2 and 3 MUL 2 3 := ( λa.λb.λc.a(bc) ) ( λg.λx. g (g x) ) ( λh.λx. h (h (h x)) ) MUL 2 3 := ( λa.λb.λc.a(bc) ) ( λg.λx. g (g x) ) ( λh.λx. h (h (h x))) = ( λc . ( λg.λx. g (g x) )( ( λh.λx. h (h (h x))) c ) ) = ( λc . ( λg.λx. g (g x) )( λx. c (c (c x))) ) = ( λc . ( λx. (λx. c (c (c x))) ((λx. c (c (c x))) x) ) ) = ( λc . ( λx. (λx. c (c (c x))) ( c (c (c x)))) ) = λc . λx. (c (c (c ( c (c (c x)))))) So we see how, just by the process of resolving using substitution, we get the final expression where the form is the encoding for 6. We still have the subtraction to defined, But that will be another post - This one took quite some time to wrap my head around! Read More: λ calculus in python code: this link will explain all the code better. Main References: Wikipedia: Church Encoding Wikipedia: Lambda Calculus Links I regularly went back to when I needed some gentle explanations ( when Wikipedia got too terse for me! ): λC for dummies: Amazingly well written note on λC. Stackoverflow answer for explanation of multiplication in λC Other Interesting Reads: To understand λC in poetry Class notes onλC Written with StackEdit and Notable and Vim.</summary></entry><entry><title type="html">Implementing a prefix tree in typescript</title><link href="https://trshant.dev/2019/03/07/prefix-tree.html" rel="alternate" type="text/html" title="Implementing a prefix tree in typescript" /><published>2019-03-07T03:30:00+01:00</published><updated>2019-03-07T03:30:00+01:00</updated><id>https://trshant.dev/2019/03/07/prefix-tree</id><content type="html" xml:base="https://trshant.dev/2019/03/07/prefix-tree.html">&lt;p&gt;This post covers the implementation of a prefix tree in typescript.  I am avoiding the write up on the datastructure as wikipedia has a real nice &lt;a href=&quot;https://en.wikipedia.org/wiki/Trie&quot;&gt;one&lt;/a&gt; on it. I’ll be using the terms “prefix tree” and “trie” interchangeably.&lt;/p&gt;

&lt;p&gt;I will start by creating a node. At the least, this node should have (a) the value of the element, (b) a list of child nodes and (c) a way to add to the child node list.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumOrStrArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumOrStrArray&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets test it with a string:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mother_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string_to_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mother_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stored_nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;string_to_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stored_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stored_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now lets define a tree as a class, using the node defined above.&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prefix_tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;mother_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;previous_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;stored_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mother_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mother_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stored_nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;addToTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StringOrNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mother_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringOrNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchChildNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oldNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stored_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you have probably noticed, the prefix_tree class requires the services of function &lt;code class=&quot;highlighter-rouge&quot;&gt;searchChildNodes&lt;/code&gt; in the node class, which is not there in our first definition of node. So we will need to add that.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;searchChildNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valueToSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;valueToSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The complete &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; class definition looks like this now:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NameOrNameArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;searchChildNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valueToSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valueToSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Testing it all together:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;trie&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;prefix_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addToTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addToTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stored_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can play around with &lt;a href=&quot;https://www.typescriptlang.org/play/#src=type%20NameOrNameArray%20%3D%20number%5B%5D%20%7C%20string%5B%5D%3B%0D%0A%0D%0Aclass%20node%20%7B%0D%0A%20%20%20%20value%3A%20number%20%7C%20string%20%7C%20null%3B%0D%0A%20%20%20%20childNodes%3A%20NameOrNameArray%3B%0D%0A%20%20%20%20constructor(value%2C%20parentNode)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.value%20%3D%20value%3B%0D%0A%20%20%20%20%20%20%20%20this.childNodes%20%3D%20%5B%5D%3B%0D%0A%20%20%20%20%20%20%20%20if%20(parentNode%20!%3D%20null)%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20parentNode.addChild(this)%3B%0D%0A%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%7D%0D%0A%20%20%20%20addChild(childNode)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.childNodes.push(childNode)%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%20%20searchChildNodes(valueToSearch)%20%7B%0D%0A%20%20%20%20%20%20%20%20for%20(var%20element%20of%20this.childNodes)%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(element.value%20%3D%3D%20valueToSearch)%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20element%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0D%0A%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%20%20%20%20return%20null%3B%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Aclass%20prefix_tree%20%7B%0D%0A%20%20%20%20mother_node%3A%20any%3B%0D%0A%20%20%20%20previous_node%3A%20any%3B%0D%0A%20%20%20%20stored_nodes%3A%20any%5B%5D%3B%0D%0A%20%20%20%20constructor(value)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.mother_node%20%3D%20new%20node(null%2C%20null)%3B%0D%0A%20%20%20%20%20%20%20%20this.previous_node%20%3D%20this.mother_node%3B%0D%0A%20%20%20%20%20%20%20%20this.stored_nodes%20%3D%20%5B%5D%3B%0D%0A%20%20%20%20%20%20%20%20%2F%2Fconsole.log(this.previous_node%2C%20this.mother_node)%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%20%20addToTree(StringOrNumber)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.previous_node%20%3D%20this.mother_node%3B%0D%0A%20%20%20%20%20%20%20%20for%20(var%20element%20of%20StringOrNumber.split(''))%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20console.log(element%2C%20this.previous_node%20)%20%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20oldNode%20%3D%20this.previous_node.searchChildNodes(element)%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(oldNode%20%3D%3D%20null)%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20var%20newNode%20%3D%20new%20node(element%2C%20this.previous_node)%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.stored_nodes.push(newNode)%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.previous_node%20%3D%20newNode%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.previous_node%20%3D%20oldNode%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20%20%20%0D%0A%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Avar%20trie%20%3D%20new%20prefix_tree(null)%3B%0D%0Atrie.addToTree(%22to%22)%3B%0D%0Atrie.addToTree(%22tea%22)%3B%0D%0Aconsole.log(trie.stored_nodes)%3B%0D%0A&quot;&gt;this&lt;/a&gt; at the &lt;a href=&quot;https://www.typescriptlang.org/play/&quot;&gt;typescript playground&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, our work is not done yet. We need to implement a way to search the prefix tree for our data. 
Here we go:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;searchInTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StringOrNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mother_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringOrNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchChildNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oldNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchChildNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oldNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Testing this&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prefix_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addToTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addToTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stored_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchInTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;toe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchInTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And so, we have ourselves a trie. Do check out the code in &lt;a href=&quot;https://gist.github.com/Trshant/d16d72d2d5651ca5e39ee0adf95d74ba&quot;&gt;github&lt;/a&gt;. or you can &lt;a href=&quot;https://www.typescriptlang.org/play/#src=type%20NameOrNameArray%20%3D%20number%5B%5D%20%7C%20string%5B%5D%3B%0D%0A%0D%0Aclass%20node%20%7B%0D%0A%20%20%20%20value%3A%20number%20%7C%20string%20%7C%20null%3B%0D%0A%20%20%20%20childNodes%3A%20NameOrNameArray%3B%0D%0A%20%20%20%20constructor(value%2C%20parentNode)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.value%20%3D%20value%3B%0D%0A%20%20%20%20%20%20%20%20this.childNodes%20%3D%20%5B%5D%3B%0D%0A%20%20%20%20%20%20%20%20if%20(parentNode%20!%3D%20null)%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20parentNode.addChild(this)%3B%0D%0A%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%7D%0D%0A%20%20%20%20addChild(childNode)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.childNodes.push(childNode)%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%20%20searchChildNodes(valueToSearch)%20%7B%0D%0A%20%20%20%20%20%20%20%20var%20element%3A%20any%3B%0D%0A%20%20%20%20%20%20%20%20for%20(%20element%20of%20this.childNodes)%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(element.value%20%3D%3D%20valueToSearch)%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20element%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0D%0A%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%20%20%20%20return%20null%3B%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Aclass%20prefix_tree%20%7B%0D%0A%20%20%20%20mother_node%3A%20any%3B%0D%0A%20%20%20%20previous_node%3A%20any%3B%0D%0A%20%20%20%20stored_nodes%3A%20any%5B%5D%3B%0D%0A%20%20%20%20constructor(value)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.mother_node%20%3D%20new%20node(null%2C%20null)%3B%0D%0A%20%20%20%20%20%20%20%20this.previous_node%20%3D%20this.mother_node%3B%0D%0A%20%20%20%20%20%20%20%20this.stored_nodes%20%3D%20%5B%5D%3B%0D%0A%20%20%20%20%20%20%20%20%2F%2Fconsole.log(this.previous_node%2C%20this.mother_node)%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%20%20addToTree(StringOrNumber)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.previous_node%20%3D%20this.mother_node%3B%0D%0A%20%20%20%20%20%20%20%20for%20(var%20element%20of%20StringOrNumber.split(''))%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2Fconsole.log(element%2C%20this.previous_node%20)%20%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20oldNode%20%3D%20this.previous_node.searchChildNodes(element)%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(oldNode%20%3D%3D%20null)%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20var%20newNode%20%3D%20new%20node(element%2C%20this.previous_node)%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.stored_nodes.push(newNode)%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.previous_node%20%3D%20newNode%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.previous_node%20%3D%20oldNode%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20%20%20%0D%0A%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%20%20%20%20var%20newNode%20%3D%20new%20node(null%2C%20this.previous_node)%3B%0D%0A%20%20%20%20%20%20%20%20this.stored_nodes.push(newNode)%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%20%20searchInTree(StringOrNumber)%20%7B%0D%0A%20%20%20%20%20%20%20%20this.previous_node%20%3D%20this.mother_node%3B%0D%0A%20%20%20%20%20%20%20%20for%20(var%20element%20of%20StringOrNumber.split(''))%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20oldNode%20%3D%20this.previous_node.searchChildNodes(element)%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(oldNode%20%3D%3D%20null)%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.previous_node%20%3D%20oldNode%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%20%20%20%20var%20oldNode%20%3D%20this.previous_node.searchChildNodes(null)%3B%0D%0A%20%20%20%20%20%20%20%20if%20(oldNode%20%3D%3D%20null)%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0D%0A%20%20%20%20%20%20%20%20%7D%20%0D%0A%20%20%20%20%20%20%20%20return%20true%3B%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Avar%20trie%20%3D%20new%20prefix_tree(null)%3B%0D%0Atrie.addToTree(%22to%22)%3B%0D%0Atrie.addToTree(%22tea%22)%3B%0D%0Aconsole.log(trie.stored_nodes)%3B%0D%0Areply%20%3D%20trie.searchInTree(%22toe%22)%3B%0D%0Aconsole.log(reply)%3B%0D%0Areply%20%3D%20trie.searchInTree(%22to%22)%3B%0D%0Aconsole.log(reply)%3B&quot;&gt;play&lt;/a&gt; with it&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbNTA1Mjc0MjUxLC0yNjI2NzU2MV19
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><category term="Algorithm" /><category term="PrefixTree" /><category term="Trie" /><category term="TypeScript" /><category term="Javascript" /><category term="DataStructures" /><summary type="html">This post covers the implementation of a prefix tree in typescript. I am avoiding the write up on the datastructure as wikipedia has a real nice one on it. I’ll be using the terms “prefix tree” and “trie” interchangeably. I will start by creating a node. At the least, this node should have (a) the value of the element, (b) a list of child nodes and (c) a way to add to the child node list. type NumOrStrArray = number[] | string[]; class node { value: number|string|null; childNodes: NumOrStrArray ; constructor(value,parentNode) { this.value = value; this.childNodes = []; if (parentNode != null) { parentNode.addChild(this); } } addChild(childNode) { this.childNodes.push(childNode); } } Lets test it with a string: var mother_node = new node(null, null); var string_to_store = &quot;hello&quot;; var previous_node = mother_node; var stored_nodes = []; string_to_store.split('').forEach(function (element, index) { var newNode = new node(element, previous_node); stored_nodes.push(newNode); previous_node = newNode; }) console.log(stored_nodes); todo(output) Now lets define a tree as a class, using the node defined above. class prefix_tree { mother_node: any; previous_node: any; stored_nodes: any[]; constructor(value) { this.mother_node = new node(null, null); this.previous_node = this.mother_node; this.stored_nodes = []; } addToTree(StringOrNumber) { this.previous_node = this.mother_node; for (var element of StringOrNumber.split('')) { console.log(element, this.previous_node ) ; var oldNode = this.previous_node.searchChildNodes(element); if (oldNode == null) { var newNode = new node(element, this.previous_node); this.stored_nodes.push(newNode); this.previous_node = newNode; } else { this.previous_node = oldNode; } } } } As you have probably noticed, the prefix_tree class requires the services of function searchChildNodes in the node class, which is not there in our first definition of node. So we will need to add that. searchChildNodes(valueToSearch) { for (var element of this.childNodes) { if ( element.value == valueToSearch) { return element; } } return null; } The complete Node class definition looks like this now: class node { value: number | string | null; childNodes: NameOrNameArray; constructor(value, parentNode) { this.value = value; this.childNodes = []; if (parentNode != null) { parentNode.addChild(this); } } addChild(childNode) { this.childNodes.push(childNode); } searchChildNodes(valueToSearch) { for (var element of this.childNodes) { if ( element.value == valueToSearch) { return element; } } return null; } } Testing it all together: var trie = new prefix_tree(null); trie.addToTree(&quot;to&quot;); trie.addToTree(&quot;tea&quot;); console.log(trie.stored_nodes); You can play around with this at the typescript playground. However, our work is not done yet. We need to implement a way to search the prefix tree for our data. Here we go: searchInTree(StringOrNumber) { this.previous_node = this.mother_node; for (var element of StringOrNumber.split('')) { var oldNode = this.previous_node.searchChildNodes(element); if (oldNode == null) { return false; } } var oldNode = this.previous_node.searchChildNodes(null); if (oldNode == null) { return false; } return true; } Testing this var trie = new prefix_tree(null); trie.addToTree(&quot;to&quot;); trie.addToTree(&quot;tea&quot;); console.log(trie.stored_nodes); reply = trie.searchInTree(&quot;toe&quot;); console.log(reply); // false reply = trie.searchInTree(&quot;to&quot;); console.log(reply); // true And so, we have ourselves a trie. Do check out the code in github. or you can play with it Written with StackEdit.</summary></entry><entry><title type="html">Building a compiler-part1 AST</title><link href="https://trshant.dev/2019/03/02/Compiler-I-AST.html" rel="alternate" type="text/html" title="Building a compiler-part1 AST" /><published>2019-03-02T14:30:00+01:00</published><updated>2019-03-02T14:30:00+01:00</updated><id>https://trshant.dev/2019/03/02/Compiler-I-AST</id><content type="html" xml:base="https://trshant.dev/2019/03/02/Compiler-I-AST.html">&lt;p&gt;&lt;strong&gt;Building blocks of a compiler&lt;/strong&gt;:
Copied from &lt;a href=&quot;https://www.programcreek.com/2011/02/how-compiler-works/&quot;&gt;https://www.programcreek.com/2011/02/how-compiler-works/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A compiler is a computer program that transforms source code written in a high-level programming language into a lower level language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is what happens in a compiler&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD
classDef className fill:#f9f,stroke:#333,stroke-width:4px;
class I,O className;
I[&quot;Input File&quot;]

I--&amp;gt;A[&quot;Lexical Analysis&quot;]
subgraph Compiler start
subgraph Arriving at AST
A--&amp;gt;B[&quot;Syntax Analysis&quot;]
end
B--&amp;gt;C[&quot;Semantic Analysis&quot;]
C--&amp;gt;D[&quot;IR Generation&quot;]
D--&amp;gt;E[&quot;IR Optimization&quot;]
E--&amp;gt;F[&quot;Code Generation&quot;]
F--&amp;gt;G[&quot;Optimization&quot;]
end
G--&amp;gt;O[&quot;Executable&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This post covers Lexical Analyser and Syntax analyser.&lt;/p&gt;

&lt;p&gt;Below diagram is based on &lt;a href=&quot;https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff&quot;&gt;Vaidehi Joshi’s&lt;/a&gt; awesome post on ASTs:
As she has, we will be using the same example for our input &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; 5+(1*12) &quot;&lt;/code&gt;. This will form a  continuity if you decide to visit her blogpost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lexical Analysis&lt;/strong&gt;
The lexical analyzer breaks the input file or sentence into a series of tokens, by removing or adding any whitespace or comments in the source code. So it should have these stages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram

participant C  as Code   
participant S  as Scanner
participant T  as Tokeniser
participant SA as Syntax Analyser  

C -&amp;gt;&amp;gt; S  : String
Note over C: &quot; 5+(1*12) &quot;
Note over S: Strip text &amp;lt;br/&amp;gt;&quot;5+(1*12)&quot;
S -&amp;gt;&amp;gt; T  : lexemes  
Note over T: Convert to Tokens&amp;lt;br/&amp;gt;[&quot;5&quot;,&quot;+&quot;,&quot;(&quot;,&quot;1&quot;,&quot;*&quot;,&quot;12&quot;,&quot;)&quot;]
T -&amp;gt;&amp;gt; SA : Tokenised    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Syntax Analysis&lt;/strong&gt;
At its very basic, a Syntax analyser converts tokens to a parse tree by looking at a set of rules. This is a simplification so that we can understand the basic functionlity of this stage of a compiler.
There are 2 stages to this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Getting a parse tree out.&lt;/li&gt;
  &lt;li&gt;Optimising the parse tree.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Again, do have a look at &lt;a href=&quot;https://medium.com/basecs/grammatically-rooting-oneself-with-parse-trees-ec9daeda7dad&quot;&gt;Vaidehi Joshi’s&lt;/a&gt; fantastic post on parse trees. Its extremely well written.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
participant T as Lexical Analyser   
participant SA1 as CST
participant SA2 as AST 

T -&amp;gt;&amp;gt; SA1 : Tokenised   
Note over T:[&quot;5&quot;,&quot;+&quot;,&quot;(&quot;,&quot;1&quot;,&quot;*&quot;,&quot;12&quot;,&quot;)&quot;]
Note over SA1: Create Parse Tree&amp;lt;br/&amp;gt;See CST figure below.
SA1  -&amp;gt;&amp;gt; SA2 : CST
Note over SA2: Optimise Parse Tree&amp;lt;br/&amp;gt;See AST figure below.
SA2  -&amp;gt;&amp;gt; Synaptic Analyser: AST 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CST : Concrete Syntax tree&lt;/strong&gt; - So This stage comes up with a parse tree. How does it do that? It looks at the expression and sees which rule it will agree with. This “see which rule it will agree with” bit will depend on which kind of token parsing is being used.
    &lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;  graph TD
      A1[&quot;Exp&quot;]
      A1--&amp;gt;A[5]
      A1--&amp;gt;B[&quot;+&quot;]
      A1--&amp;gt;A2[Exp]
      A2--&amp;gt;C[&quot;(&quot;]
      A2--&amp;gt;A3[&quot;Exp&quot;]
      A2--&amp;gt;G[&quot;)&quot;]
      A3--&amp;gt;D[1]
      A3--&amp;gt;E[&quot;*&quot;]
      A3--&amp;gt;F[12]
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;We can see that the expression we started out with was divided into parts and further into more parts. This above tree tells us how it was divided.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AST : Abstract Syntax tree&lt;/strong&gt; As we can see, the parse tree is fabulous and true to the rules of the language. But its too verbose (too many nodes!). We try and solve that problem with Abstract Syntax tree where we throw out what is not needed and keep the core of the program. The main aim of this part is to reduce the cruft and keep the core of the code as below.
    &lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;  graph TD
      B[&quot;+&quot;]
      B--&amp;gt;A[5]
          B--&amp;gt;E(*)
          E--&amp;gt;D(1)
          E--&amp;gt;F(12)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To understand and see these in action, Do try out &lt;a href=&quot;https://astexplorer.net/&quot;&gt;https://astexplorer.net/&lt;/a&gt;. This site is amazing and will make you see in action building of an AST with code.  Read &lt;a href=&quot;https://blog.buildo.io/a-tour-of-abstract-syntax-trees-906c0574a067&quot;&gt;this&lt;/a&gt; to figure out the why’s and what’s.&lt;/p&gt;

&lt;p&gt;Many thanks to the creators of  &lt;a href=&quot;https://mermaidjs.github.io&quot;&gt;https://mermaidjs.github.io&lt;/a&gt; for the sequence diagram. It is truly a pleasure to work with.&lt;/p&gt;

&lt;p&gt;The next post in this series will be the implementation of this in Typescript.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTM2NjM3MDQyMSwxNTgwNzYzMTQ4XX0=
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><category term="CompSci" /><category term="compilerTheory" /><category term="AST" /><summary type="html">Building blocks of a compiler: Copied from https://www.programcreek.com/2011/02/how-compiler-works/ A compiler is a computer program that transforms source code written in a high-level programming language into a lower level language. Here is what happens in a compiler graph TD classDef className fill:#f9f,stroke:#333,stroke-width:4px; class I,O className; I[&quot;Input File&quot;] I--&amp;gt;A[&quot;Lexical Analysis&quot;] subgraph Compiler start subgraph Arriving at AST A--&amp;gt;B[&quot;Syntax Analysis&quot;] end B--&amp;gt;C[&quot;Semantic Analysis&quot;] C--&amp;gt;D[&quot;IR Generation&quot;] D--&amp;gt;E[&quot;IR Optimization&quot;] E--&amp;gt;F[&quot;Code Generation&quot;] F--&amp;gt;G[&quot;Optimization&quot;] end G--&amp;gt;O[&quot;Executable&quot;] This post covers Lexical Analyser and Syntax analyser. Below diagram is based on Vaidehi Joshi’s awesome post on ASTs: As she has, we will be using the same example for our input &quot; 5+(1*12) &quot;. This will form a continuity if you decide to visit her blogpost. Lexical Analysis The lexical analyzer breaks the input file or sentence into a series of tokens, by removing or adding any whitespace or comments in the source code. So it should have these stages: sequenceDiagram participant C as Code participant S as Scanner participant T as Tokeniser participant SA as Syntax Analyser C -&amp;gt;&amp;gt; S : String Note over C: &quot; 5+(1*12) &quot; Note over S: Strip text &amp;lt;br/&amp;gt;&quot;5+(1*12)&quot; S -&amp;gt;&amp;gt; T : lexemes Note over T: Convert to Tokens&amp;lt;br/&amp;gt;[&quot;5&quot;,&quot;+&quot;,&quot;(&quot;,&quot;1&quot;,&quot;*&quot;,&quot;12&quot;,&quot;)&quot;] T -&amp;gt;&amp;gt; SA : Tokenised Syntax Analysis At its very basic, a Syntax analyser converts tokens to a parse tree by looking at a set of rules. This is a simplification so that we can understand the basic functionlity of this stage of a compiler. There are 2 stages to this: Getting a parse tree out. Optimising the parse tree. Again, do have a look at Vaidehi Joshi’s fantastic post on parse trees. Its extremely well written. sequenceDiagram participant T as Lexical Analyser participant SA1 as CST participant SA2 as AST T -&amp;gt;&amp;gt; SA1 : Tokenised Note over T:[&quot;5&quot;,&quot;+&quot;,&quot;(&quot;,&quot;1&quot;,&quot;*&quot;,&quot;12&quot;,&quot;)&quot;] Note over SA1: Create Parse Tree&amp;lt;br/&amp;gt;See CST figure below. SA1 -&amp;gt;&amp;gt; SA2 : CST Note over SA2: Optimise Parse Tree&amp;lt;br/&amp;gt;See AST figure below. SA2 -&amp;gt;&amp;gt; Synaptic Analyser: AST CST : Concrete Syntax tree - So This stage comes up with a parse tree. How does it do that? It looks at the expression and sees which rule it will agree with. This “see which rule it will agree with” bit will depend on which kind of token parsing is being used. graph TD A1[&quot;Exp&quot;] A1--&amp;gt;A[5] A1--&amp;gt;B[&quot;+&quot;] A1--&amp;gt;A2[Exp] A2--&amp;gt;C[&quot;(&quot;] A2--&amp;gt;A3[&quot;Exp&quot;] A2--&amp;gt;G[&quot;)&quot;] A3--&amp;gt;D[1] A3--&amp;gt;E[&quot;*&quot;] A3--&amp;gt;F[12] We can see that the expression we started out with was divided into parts and further into more parts. This above tree tells us how it was divided. AST : Abstract Syntax tree As we can see, the parse tree is fabulous and true to the rules of the language. But its too verbose (too many nodes!). We try and solve that problem with Abstract Syntax tree where we throw out what is not needed and keep the core of the program. The main aim of this part is to reduce the cruft and keep the core of the code as below. graph TD B[&quot;+&quot;] B--&amp;gt;A[5] B--&amp;gt;E(*) E--&amp;gt;D(1) E--&amp;gt;F(12) To understand and see these in action, Do try out https://astexplorer.net/. This site is amazing and will make you see in action building of an AST with code. Read this to figure out the why’s and what’s. Many thanks to the creators of https://mermaidjs.github.io for the sequence diagram. It is truly a pleasure to work with. The next post in this series will be the implementation of this in Typescript. Written with StackEdit.</summary></entry><entry><title type="html">Implementing A Bloom Filter</title><link href="https://trshant.dev/2019/02/05/bloom-filter.html" rel="alternate" type="text/html" title="Implementing A Bloom Filter" /><published>2019-02-05T03:21:43+01:00</published><updated>2019-02-05T03:21:43+01:00</updated><id>https://trshant.dev/2019/02/05/bloom-filter</id><content type="html" xml:base="https://trshant.dev/2019/02/05/bloom-filter.html">&lt;p&gt;A bloom filter is a data structure which allows the server to sync data with a client with low data consumption. Another usecase is to find the uniqueness of the data. &lt;a href=&quot;https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/&quot;&gt;Geekforgeeks&lt;/a&gt; has a pretty good explanation of bloom filters.&lt;/p&gt;

&lt;p&gt;This post addresses the syncing the data from the server to client. We  assume that the data on the client is already updating the server as and when the data is entered. The problem statement is not the unavailability or low availability of internet. Rather, it is to minimise the syncing operation involved.&lt;/p&gt;

&lt;p&gt;The master hash is the ANDed product of all the individual hashes. The hashing function used here is the murmur hash which has great speed improvements over the normally used  SHA256. We shall use Node.js for our proof of concept.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writing a small proof of concept with existing libraries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://www.npmjs.com/package/murmurhash-native&quot;&gt;Murmurhash-native&lt;/a&gt;’s npm page&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'murmurhash-native'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hash me!'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2061152078&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, using the same package, Lets hash a few strings:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'murmurhash-native'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hash me!'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2061152078&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hash2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'do me too'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3728646459&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we need to OR it since we need all the bits set from all the hashes. ORing it all together, we get:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hash2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; Final hash : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4278103935&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is our Masterhash. The 10-digit long string holds as many strings as we can give it.&lt;/p&gt;

&lt;p&gt;Now we create a few more hashes to check against the master hash.  we will create hashes for 2 strings, one of which is known to us and calculated in the masterhash. the other one will be an unfamiliar one.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;testHash1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'not me!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testHash1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1542629515&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The Familiar one &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;testHash2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'do me too'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testHash2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3728646459&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to check if the bits are set both in the individual hash as well as the master hash. Coding it up…..&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;checkTheHashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//console.log(masterHash, hashToCheck, check);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets run the function against the 2 hashes we created for checking against :&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;testHash1&lt;/code&gt; should give a false since the data is not present in the masterhash:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;checkTheHashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testHash1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; checking hash &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;not me!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; (should be false) : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;testHash2&lt;/code&gt; should give a true since the data is not present in the masterhash:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;checkTheHashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oredhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testHash2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; checking hash &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;do me too&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; (should be true): &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now since i know it works, let me do the responsible thing and put it all in a class, so I dont pollute the global namespace.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bloomFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;hashDataPoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dataString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;murmurHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dataString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;checkIfPresent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringToCheck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hashDataPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StringToCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;masterHash&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hashToCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I am going to use this class later.&lt;/p&gt;

&lt;p&gt;As we can see, it is quite useful for&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;checking uniqueness : where the answer for the &lt;code class=&quot;highlighter-rouge&quot;&gt;checkIfPresent&lt;/code&gt; function is expected to be false.&lt;/li&gt;
  &lt;li&gt;availability of the data: where the answer for the &lt;code class=&quot;highlighter-rouge&quot;&gt;checkIfPresent&lt;/code&gt; function is expected to be true.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More than that, we can see how much time and data it has saved us.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;As we are concerned with syncing data between the server and client.&lt;/p&gt;

&lt;p&gt;Here is how the interaction between the client/server will take place:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
Client -&amp;gt;&amp;gt; Server: Hi! here's my master hash (CMH) with the last time synced

Note over Server,Client: 1. Check each data point against &amp;lt;br/&amp;gt;individual hashes.&amp;lt;br/&amp;gt;2. Collect all the ones where the bits&amp;lt;br/&amp;gt; dont match.&amp;lt;br/&amp;gt;3. Send the Collected data points &amp;lt;br/&amp;gt;back to the client with its own&amp;lt;br/&amp;gt; master hash (SMH).

Server -&amp;gt;&amp;gt; Client: There you go....
Client -&amp;gt;&amp;gt; Client : Updates Itself
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the server itself consists of 2 parts. the web server and the database server. 
The strategy for the maintaining the masterhash could be:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Update the hash probably in a field in the same table. or a linked one.&lt;/li&gt;
  &lt;li&gt;Continuously update the master hash with each insert or update.&lt;/li&gt;
  &lt;li&gt;Periodically refresh the masterhash ( use a Cron! ) to ensure the deleted data also is reflected in the masterhash.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT * FROM table_name HAVING hash_field_value &amp;amp; CMH &amp;lt;&amp;gt; hash_field_value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above SQL will return only those rows from the tablename which&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Are not present in the client system&lt;/li&gt;
  &lt;li&gt;Updated rows in the server which have yet  been synced with the client system.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The syncing happens recursively till both the systems have the same Masterhash. I will be elaborating on that in a future post.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Some reading:
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTc0MDY4NDgxOCwtMTMzMzQ4MTY3LC0yMD
MwMTYwMDc0LDIxMTY1NzUwMjAsMTkwODQ0NzYzNF19
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><category term="Algorithm" /><category term="BloomFilter" /><summary type="html">A bloom filter is a data structure which allows the server to sync data with a client with low data consumption. Another usecase is to find the uniqueness of the data. Geekforgeeks has a pretty good explanation of bloom filters. This post addresses the syncing the data from the server to client. We assume that the data on the client is already updating the server as and when the data is entered. The problem statement is not the unavailability or low availability of internet. Rather, it is to minimise the syncing operation involved. The master hash is the ANDed product of all the individual hashes. The hashing function used here is the murmur hash which has great speed improvements over the normally used SHA256. We shall use Node.js for our proof of concept. Writing a small proof of concept with existing libraries From Murmurhash-native’s npm page var murmurHash = require('murmurhash-native').murmurHash murmurHash( 'hash me!' ) // 2061152078 Now, using the same package, Lets hash a few strings: var murmurHash = require('murmurhash-native').murmurHash var hash = murmurHash( 'hash me!' ) // 2061152078 console.log( hash ); var hash2 = murmurHash('do me too') // 3728646459 console.log(hash2); Now we need to OR it since we need all the bits set from all the hashes. ORing it all together, we get: var oredhash = hash &amp;gt;&amp;gt;&amp;gt; 0 | hash2 &amp;gt;&amp;gt;&amp;gt; 0 ; oredhash = oredhash &amp;gt;&amp;gt;&amp;gt; 0; console.log(&quot; Final hash : &quot;,oredhash); // 4278103935 This is our Masterhash. The 10-digit long string holds as many strings as we can give it. Now we create a few more hashes to check against the master hash. we will create hashes for 2 strings, one of which is known to us and calculated in the masterhash. the other one will be an unfamiliar one. var testHash1 = murmurHash('not me!') &amp;gt;&amp;gt;&amp;gt; 0 console.log(testHash1); //1542629515 // The Familiar one var testHash2 = murmurHash('do me too') &amp;gt;&amp;gt;&amp;gt; 0 console.log(testHash2); // 3728646459 Now we need to check if the bits are set both in the individual hash as well as the master hash. Coding it up….. function checkTheHashes( masterHash , hashToCheck ){ var check = (masterHash &amp;amp; hashToCheck) &amp;gt;&amp;gt;&amp;gt; 0; //console.log(masterHash, hashToCheck, check); if (check == hashToCheck) { return true; } else { return false; } } Lets run the function against the 2 hashes we created for checking against : The testHash1 should give a false since the data is not present in the masterhash: check = checkTheHashes(oredhash, testHash1); console.log(&quot; checking hash \&quot;not me!\&quot; (should be false) : &quot;,check); // false The testHash2 should give a true since the data is not present in the masterhash: check = checkTheHashes(oredhash, testHash2); console.log(&quot; checking hash \&quot;do me too\&quot; (should be true): &quot;,check); // true Now since i know it works, let me do the responsible thing and put it all in a class, so I dont pollute the global namespace. var bloomFilter = { masterHash : null, hashDataPoint : function( dataString ){ hash = murmurHash( dataString ) &amp;gt;&amp;gt;&amp;gt; 0 if( !isNull( masterHash ) ){ this,masterHash = this.masterHash | hash ; } else { this.masterHash = hash; } }, checkIfPresent : function( StringToCheck ){ hashToCheck = this.hashDataPoint(StringToCheck); var check = ( this.masterHash &amp;amp; hashToCheck) &amp;gt;&amp;gt;&amp;gt; 0; if (check == hashToCheck) { return true; } else { return false; } } } I am going to use this class later. As we can see, it is quite useful for checking uniqueness : where the answer for the checkIfPresent function is expected to be false. availability of the data: where the answer for the checkIfPresent function is expected to be true. More than that, we can see how much time and data it has saved us. As we are concerned with syncing data between the server and client. Here is how the interaction between the client/server will take place: sequenceDiagram Client -&amp;gt;&amp;gt; Server: Hi! here's my master hash (CMH) with the last time synced Note over Server,Client: 1. Check each data point against &amp;lt;br/&amp;gt;individual hashes.&amp;lt;br/&amp;gt;2. Collect all the ones where the bits&amp;lt;br/&amp;gt; dont match.&amp;lt;br/&amp;gt;3. Send the Collected data points &amp;lt;br/&amp;gt;back to the client with its own&amp;lt;br/&amp;gt; master hash (SMH). Server -&amp;gt;&amp;gt; Client: There you go.... Client -&amp;gt;&amp;gt; Client : Updates Itself However, the server itself consists of 2 parts. the web server and the database server. The strategy for the maintaining the masterhash could be: Update the hash probably in a field in the same table. or a linked one. Continuously update the master hash with each insert or update. Periodically refresh the masterhash ( use a Cron! ) to ensure the deleted data also is reflected in the masterhash. SELECT * FROM table_name HAVING hash_field_value &amp;amp; CMH &amp;lt;&amp;gt; hash_field_value The above SQL will return only those rows from the tablename which Are not present in the client system Updated rows in the server which have yet been synced with the client system. The syncing happens recursively till both the systems have the same Masterhash. I will be elaborating on that in a future post. Some reading: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators Written with StackEdit.</summary></entry><entry><title type="html">A note on Docker.</title><link href="https://trshant.dev/2019/01/27/A-note-on-docker.html" rel="alternate" type="text/html" title="A note on Docker." /><published>2019-01-27T14:30:00+01:00</published><updated>2019-01-27T14:30:00+01:00</updated><id>https://trshant.dev/2019/01/27/A-note-on-docker</id><content type="html" xml:base="https://trshant.dev/2019/01/27/A-note-on-docker.html">&lt;p&gt;Docker is a buzzword right now.&lt;br /&gt;
It is a lightweight virtualisation system, which does not add to your system and maintains developer sanity.&lt;br /&gt;
Since its not a full blown VM, git handles things beautifully. your configured dev environment can be moved to the production system, setting only the environment variable in place for the respective production/test/dev systems. And you get to save some HDD space, which is also quite expensive.&lt;br /&gt;
Basically, you are leaving nothing to chance. And using kubernetes, you can maintain all your containers.&lt;br /&gt;
Before we go into the article, we both need to know what I will only be explaining a few key concepts in the docker world. Once we understand these, we can go forward to learning about them.&lt;br /&gt;
The main terms to understand here are:&lt;br /&gt;
&lt;strong&gt;1. files&lt;/strong&gt; : These are the files you need dockerised.&lt;br /&gt;
&lt;strong&gt;2. images&lt;/strong&gt; : These are the systems you want to encapsulate the files in.  &lt;br /&gt;
&lt;strong&gt;3. container&lt;/strong&gt; : These are what we build using the images and files.&lt;br /&gt;
Simple enough, I suppose!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTMyOTE2MzAxMCwxNTMyNTcyNDEyLC03Nj
c5OTY0MTgsLTEzNDY0MjU4ODldfQ==
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><category term="programming" /><category term="softwareEngineering" /><category term="docker" /><summary type="html">Docker is a buzzword right now. It is a lightweight virtualisation system, which does not add to your system and maintains developer sanity. Since its not a full blown VM, git handles things beautifully. your configured dev environment can be moved to the production system, setting only the environment variable in place for the respective production/test/dev systems. And you get to save some HDD space, which is also quite expensive. Basically, you are leaving nothing to chance. And using kubernetes, you can maintain all your containers. Before we go into the article, we both need to know what I will only be explaining a few key concepts in the docker world. Once we understand these, we can go forward to learning about them. The main terms to understand here are: 1. files : These are the files you need dockerised. 2. images : These are the systems you want to encapsulate the files in. 3. container : These are what we build using the images and files. Simple enough, I suppose! Written with StackEdit.</summary></entry><entry><title type="html">Noun and verb based programming</title><link href="https://trshant.dev/2018/11/15/Noun-and-Verb-based-programming.html" rel="alternate" type="text/html" title="Noun and verb based programming" /><published>2018-11-15T14:30:00+01:00</published><updated>2018-11-15T14:30:00+01:00</updated><id>https://trshant.dev/2018/11/15/Noun-and-Verb-based-programming</id><content type="html" xml:base="https://trshant.dev/2018/11/15/Noun-and-Verb-based-programming.html">&lt;p&gt;Today i came to know of a new thing and quite frankly, it blew my mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thinking in terms of verbs and nouns&lt;/strong&gt;: This fantabulous idea was spoken to me by my mentor this evening. its also there on the web&lt;sup id=&quot;fnref:vnp&quot;&gt;&lt;a href=&quot;#fn:vnp&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;so what does this mean?
consider this requirement: &lt;em&gt;we need to add a additional phone number to a user.&lt;/em&gt;
so here we have verbs:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;add&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;nouns:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;user&lt;/li&gt;
  &lt;li&gt;additional phone number&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so we can add a new variable ‘additional phone number’ to a ‘user’ class and a new method to change this variable ‘add’. This is definitely something to understand how to design your classes and methods to interact with other classes. 
another important use would be to  change contexts while programming. see above. the program here is written with reference to the user, i.e., noun based, and keeping the verb as the context, we program the nouns around it. but we can also write atomic functions where the noun is the context and the verb is passed to it. This is a functional programming paradigm and can ease the software design process there too.&lt;/p&gt;

&lt;p&gt;Do read the footnote link&lt;sup id=&quot;fnref:vnp:1&quot;&gt;&lt;a href=&quot;#fn:vnp&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. It explains a lot more than my post does.&lt;/p&gt;

&lt;p&gt;Also, if you are in the mood for some more reading and nostalgia, jead over to the &lt;a href=&quot;https://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html&quot;&gt;Execution in the kingdom of nouns&lt;/a&gt;.&lt;/p&gt;

&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbOTE5NjA0NzE4LC0xNzc4MTkzMzg2LDEwMD
Y4ODAwMzBdfQ==
--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:vnp&quot;&gt;
      &lt;p&gt;(https://wbsimms.com/programming-nouns-verbs/) &lt;a href=&quot;#fnref:vnp&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:vnp:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><category term="programming" /><category term="softwareEngineering" /><summary type="html">Today i came to know of a new thing and quite frankly, it blew my mind. Thinking in terms of verbs and nouns: This fantabulous idea was spoken to me by my mentor this evening. its also there on the web1. so what does this mean? consider this requirement: we need to add a additional phone number to a user. so here we have verbs: add nouns: user additional phone number so we can add a new variable ‘additional phone number’ to a ‘user’ class and a new method to change this variable ‘add’. This is definitely something to understand how to design your classes and methods to interact with other classes. another important use would be to change contexts while programming. see above. the program here is written with reference to the user, i.e., noun based, and keeping the verb as the context, we program the nouns around it. but we can also write atomic functions where the noun is the context and the verb is passed to it. This is a functional programming paradigm and can ease the software design process there too. Do read the footnote link1. It explains a lot more than my post does. Also, if you are in the mood for some more reading and nostalgia, jead over to the Execution in the kingdom of nouns. (https://wbsimms.com/programming-nouns-verbs/) &amp;#8617; &amp;#8617;2</summary></entry><entry><title type="html">Scope and Context in JavaScript</title><link href="https://trshant.dev/2018/11/05/Contexts-in-JavaScript.html" rel="alternate" type="text/html" title="Scope and Context in JavaScript" /><published>2018-11-05T14:30:00+01:00</published><updated>2018-11-05T14:30:00+01:00</updated><id>https://trshant.dev/2018/11/05/Contexts-in-JavaScript</id><content type="html" xml:base="https://trshant.dev/2018/11/05/Contexts-in-JavaScript.html">&lt;p&gt;While there are many, many articles on the topic online &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I just wanted to add my $0.02 to it.&lt;br /&gt;
&lt;strong&gt;scope&lt;/strong&gt; is the visibility of the variable. Think of it being in the “line of sight”, where line of sight is on the same level or below.&lt;br /&gt;
&lt;strong&gt;context&lt;/strong&gt; means the dependence of the variable on being in an environment. This is used for methods in objects mainly, since the context can change for every instance of the object.&lt;/p&gt;

&lt;p&gt;However, we can change the context for any method by using the call or apply function. Do go through  &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; - its fun and will give you intuition as to scope and contexts .&lt;/p&gt;

&lt;p&gt;Also, i would like to mention that &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; and &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; helped a lot in making this post look kind of academic.&lt;/p&gt;

&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTE2ODMxNjcyNTEsLTIwMzYwMDc0NzksLT
IwMjAyMjU4MDBdfQ==
--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;just one of the many! &lt;a href=&quot;https://blog.kevinchisholm.com/javascript/difference-between-scope-and-context/&quot;&gt;What is the Difference Between Scope and Context in JavaScript?&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://johnresig.com/apps/learn/&quot;&gt;John Resig’s Learning Advanced JavaScript &lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.chriskrycho.com/2015/academic-markdown-and-citations.html&quot;&gt;Academic markdown and citations&lt;/a&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.markdownguide.org/cheat-sheet/&quot;&gt;Markdown cheatsheet&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><category term="JavaScript" /><summary type="html">While there are many, many articles on the topic online 1, I just wanted to add my $0.02 to it. scope is the visibility of the variable. Think of it being in the “line of sight”, where line of sight is on the same level or below. context means the dependence of the variable on being in an environment. This is used for methods in objects mainly, since the context can change for every instance of the object. However, we can change the context for any method by using the call or apply function. Do go through 2 - its fun and will give you intuition as to scope and contexts . Also, i would like to mention that 3 and 4 helped a lot in making this post look kind of academic. just one of the many! What is the Difference Between Scope and Context in JavaScript? &amp;#8617; John Resig’s Learning Advanced JavaScript  &amp;#8617; Academic markdown and citations. &amp;#8617; Markdown cheatsheet &amp;#8617;</summary></entry><entry><title type="html">Code Snippets for data preprocessing using Pandas - Part 1</title><link href="https://trshant.dev/2018/10/21/Tips-for-preprocessing-data-part-1.html" rel="alternate" type="text/html" title="Code Snippets for data preprocessing using Pandas - Part 1" /><published>2018-10-21T04:21:43+02:00</published><updated>2018-10-21T04:21:43+02:00</updated><id>https://trshant.dev/2018/10/21/Tips-for-preprocessing-data-part-1</id><content type="html" xml:base="https://trshant.dev/2018/10/21/Tips-for-preprocessing-data-part-1.html">&lt;p&gt;This post will be all about processing data using pandas.&lt;/p&gt;

&lt;p&gt;Use this to read CSVs into a dataframe&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df = pd.read_csv('train.csv')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, in case you need to prepare a DataFrame and have been unfortunate enough to get a CSV file with no headers, then this is the way to go&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df = pd.read_csv('file_name.csv', header = None, names = ['labels','you','want','to','give'] )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is one very usable function to see which data is empty or null&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;missing_data_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;missing_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Total'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Percent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missing_data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you see any empty data you can fill it in with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df['column_name'].fillna(1000, inplace=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dropping a column is easy&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df.drop('column_name', axis=1, inplace=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dropping row/s if a column is blank/null&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df.drop(df[pd.isnull(df['Embarked'])].index, inplace=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can make columns categorical ( converting ‘male’ and ‘female’ to 0 and 1 ) without too much trouble&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df['Sex'] = pd.Categorical(df['Sex'])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However this wont be seen easily till you  do this bit&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df = pd.get_dummies(df, drop_first=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the dataframe:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df.head(optional number of rows you want to see)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTc5MDQ0Mzk2OV19
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><category term="BigData" /><category term="pandas" /><category term="CodeSnippets" /><summary type="html">This post will be all about processing data using pandas. Use this to read CSVs into a dataframe df = pd.read_csv('train.csv') However, in case you need to prepare a DataFrame and have been unfortunate enough to get a CSV file with no headers, then this is the way to go df = pd.read_csv('file_name.csv', header = None, names = ['labels','you','want','to','give'] ) This is one very usable function to see which data is empty or null def missing_data_table(df): total = df.isnull().sum().sort_values(ascending=False) percent = (df.isnull().sum()/df.isnull().count()).sort_values(ascending=False) missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent']) return missing_data If you see any empty data you can fill it in with df['column_name'].fillna(1000, inplace=True) Dropping a column is easy df.drop('column_name', axis=1, inplace=True) Dropping row/s if a column is blank/null df.drop(df[pd.isnull(df['Embarked'])].index, inplace=True) We can make columns categorical ( converting ‘male’ and ‘female’ to 0 and 1 ) without too much trouble df['Sex'] = pd.Categorical(df['Sex']) However this wont be seen easily till you do this bit df = pd.get_dummies(df, drop_first=True) See the dataframe: df.head(optional number of rows you want to see) Written with StackEdit.</summary></entry><entry><title type="html">Code snippets for ML using Scikit-Learn - Part 1</title><link href="https://trshant.dev/2018/10/20/tips-for-ML-part-1.html" rel="alternate" type="text/html" title="Code snippets for ML using Scikit-Learn - Part 1" /><published>2018-10-20T04:21:43+02:00</published><updated>2018-10-20T04:21:43+02:00</updated><id>https://trshant.dev/2018/10/20/tips-for-ML-part-1</id><content type="html" xml:base="https://trshant.dev/2018/10/20/tips-for-ML-part-1.html">&lt;p&gt;This is a page where i will be putting in things i learned while starting off again in ML.&lt;br /&gt;
I am using scikit-learn to do my ml this time and am trying to go through ML in as small a timeframe as possible.
I have been learning about linear and logistic regression.
The correct ones to use in both the cases are &lt;code class=&quot;highlighter-rouge&quot;&gt;from sklearn.linear_model    import LinearRegression&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;from sklearn.linear_model import LogisticRegression&lt;/code&gt; which is intiutive.
This is the bit of code that matters&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;linreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;linreg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;logreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogisticRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'liblinear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multi_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ovr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_jobs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logreg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Post this, we can do a predict and see how the model behaves.&lt;/p&gt;

&lt;p&gt;Have a look at this repo’s 2 pages to see what i did using the above code.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Written with &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt;.
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTE0NjU4ODU5NjIsMTA2NTY5Mjk4NF19
--&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><category term="MachineLearning" /><category term="AI/ML" /><category term="CodeSnippets" /><summary type="html">This is a page where i will be putting in things i learned while starting off again in ML. I am using scikit-learn to do my ml this time and am trying to go through ML in as small a timeframe as possible. I have been learning about linear and logistic regression. The correct ones to use in both the cases are from sklearn.linear_model import LinearRegression and from sklearn.linear_model import LogisticRegression which is intiutive. This is the bit of code that matters linreg = LinearRegression().fit( X_train , y_train ) linreg.score( X_test , y_test ) and logreg = LogisticRegression( solver='liblinear',multi_class='ovr',n_jobs=1 ) logreg.fit(X_train, y_train) Post this, we can do a predict and see how the model behaves. Have a look at this repo’s 2 pages to see what i did using the above code. Written with StackEdit.</summary></entry><entry><title type="html">A dive into UI javascript frameworks - Part 2</title><link href="https://trshant.dev/2018/07/04/A-Dive-into-ui-javascript-frameworks-part-2.html" rel="alternate" type="text/html" title="A dive into UI javascript frameworks - Part 2" /><published>2018-07-04T21:51:43+02:00</published><updated>2018-07-04T21:51:43+02:00</updated><id>https://trshant.dev/2018/07/04/A-Dive-into-ui-javascript-frameworks-part-2</id><content type="html" xml:base="https://trshant.dev/2018/07/04/A-Dive-into-ui-javascript-frameworks-part-2.html">&lt;p&gt;In this post I will be laying out an idea of how to build a front page for a blog using the components, instances laid out in my previous post, using directives to achieve our goal. 
But I will need to understand the idea behind this so This post will be about learning and be testing things out, this will help me in taking good decisions finishing the blog code. 
Along the way, I will be writing code to test my ideas. So, writing a small page to test my code, I begin with forking the hello world example from the &lt;a href=&quot;https://vuejs.org/v2/guide/&quot;&gt;official guide&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;My first Vue app&amp;lt;/title&amp;gt;
  &amp;lt;!-- development version, includes helpful console warnings --&amp;gt;
  &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;app&quot;&amp;gt;
    
  &amp;lt;/div&amp;gt;

  &amp;lt;script&amp;gt;
    var app = new Vue({
      el: '#app',
      data: {
        message: 'Hello Vue!'
      }
    })
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if you copy that into an HTML file and then open it, you will be greeted with a “Hello Vue!” message. If you open your console log and type in app.message = “Hello Trshant!”, you will find that the message has changed to whatever you typed. This means that the data in the app is coupled with the  part of the HTML; and if we change the data using ajax, it will make the necessary change in the presentation. &lt;em&gt;awesome!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Moving on, I have copied this lovely todo app made in Vue and forked it -&amp;gt; &lt;a href=&quot;https://jsfiddle.net/trshant/oqka1f8p/1/&quot;&gt;There you go&lt;/a&gt;. Do please open it and go thru the code and the example itself. I will go through this and explain the functionality of every line. my motive here is to understand the need for bindings and presentation logic.&lt;/p&gt;

&lt;p&gt;I will be going thru the HTML and then the JS. But before we do that, we will ask ourselves the important questions - The Objective/Brief of our task.&lt;/p&gt;

&lt;p&gt;We want to build a small to-do app. This should have a text box and a button next to it, on the top. when you type in something and hit the button or press enter, this should populate underneath, with a checkbox to its left. we also need a delete button. When you click the checkbox, the text should be struck out.&lt;/p&gt;

&lt;p&gt;Since we have some clarity on what we need, we move on to the code. Do have a look:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Main Div Holding our Application Data --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Panel for holding our input --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mark-all&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;areAllSelected&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectAll&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;What do you need to do?&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autofocus&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text-input&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newTask&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:keyup&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enter=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addTask&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clearList&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Clear List&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Unordered list for holding our todo items --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task in taskList&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{done: task.checked}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task.checked&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;removeTask(task)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;X&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This stringifies the contents of the data object and displays it on the page --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The main input with button&lt;/strong&gt; : look at the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;section class=&quot;panel&quot;&amp;gt;&lt;/code&gt; element. So we have a checkbox (which is not in the brief above the code), an input and a button. All this is in HTML..but whats the v-on and v-bind and v-model?&lt;br /&gt;
These are called directives. They are very very important and so, we should understand what they do. These are event listeners and provide binding with the data source or functions that we will build.&lt;br /&gt;
Here, we have a few directives. I will list them and provide an explanation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;v-bind&lt;/strong&gt;: This binds an attribute of the element with the output of a function, which is constantly evaluated, or some data element. here we see &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:checked=&quot;areAllSelected&quot;&lt;/code&gt; - this binds the output of a &lt;em&gt;constantly evaluated function&lt;/em&gt; areAllSelected to the &lt;em&gt;checked&lt;/em&gt; property of the checkbox.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;v-on&lt;/strong&gt;: This is an event listener. This executes a function on the occurrence of that event. &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on:click=&quot;selectAll&quot;&lt;/code&gt; - here the function selectAll is executed when the click event executes on this element. Another instance of the v-on is the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on:keyup.enter=&quot;addTask&quot;&lt;/code&gt;. Intuitively, you can say that this is supposed to execute addTask on the event of the enter button is released.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;v-model&lt;/strong&gt;: This binds the data to the element value when that value is an attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will now go through the rest of the code - the &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; element. We encounter something different here - the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for=&quot;task in taskList&quot;&lt;/code&gt; bit. This is a ‘for’ loop. it loops through each element ( called &lt;em&gt;task&lt;/em&gt; ) in the data &lt;em&gt;taskList&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I think we can now go thru the Javascript and will find it self-explanatory. 
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTIwMzIzMzIyNzVdfQ==
--&gt;&lt;/p&gt;</content><author><name>Trshant Bhat</name><email>mail@trshant.dev</email></author><category term="Javascript" /><category term="javascript frameworks" /><category term="VueJS" /><summary type="html">In this post I will be laying out an idea of how to build a front page for a blog using the components, instances laid out in my previous post, using directives to achieve our goal. But I will need to understand the idea behind this so This post will be about learning and be testing things out, this will help me in taking good decisions finishing the blog code. Along the way, I will be writing code to test my ideas. So, writing a small page to test my code, I begin with forking the hello world example from the official guide. &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My first Vue app&amp;lt;/title&amp;gt; &amp;lt;!-- development version, includes helpful console warnings --&amp;gt; &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&quot;app&quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: '#app', data: { message: 'Hello Vue!' } }) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Now, if you copy that into an HTML file and then open it, you will be greeted with a “Hello Vue!” message. If you open your console log and type in app.message = “Hello Trshant!”, you will find that the message has changed to whatever you typed. This means that the data in the app is coupled with the part of the HTML; and if we change the data using ajax, it will make the necessary change in the presentation. awesome! Moving on, I have copied this lovely todo app made in Vue and forked it -&amp;gt; There you go. Do please open it and go thru the code and the example itself. I will go through this and explain the functionality of every line. my motive here is to understand the need for bindings and presentation logic. I will be going thru the HTML and then the JS. But before we do that, we will ask ourselves the important questions - The Objective/Brief of our task. We want to build a small to-do app. This should have a text box and a button next to it, on the top. when you type in something and hit the button or press enter, this should populate underneath, with a checkbox to its left. we also need a delete button. When you click the checkbox, the text should be struck out. Since we have some clarity on what we need, we move on to the code. Do have a look: &amp;lt;!-- Main Div Holding our Application Data --&amp;gt; &amp;lt;div class=&quot;container&quot; id=&quot;todo&quot;&amp;gt; &amp;lt;!-- Panel for holding our input --&amp;gt; &amp;lt;section class=&quot;panel&quot;&amp;gt; &amp;lt;input type=&quot;checkbox&quot; id=&quot;mark-all&quot; v-bind:checked=&quot;areAllSelected&quot; v-on:click=&quot;selectAll&quot;&amp;gt; &amp;lt;input type=&quot;text&quot; placeholder=&quot;What do you need to do?&quot; autofocus class=&quot;text-input&quot; v-model=&quot;newTask&quot; v-on:keyup.enter=&quot;addTask&quot;&amp;gt; &amp;lt;button v-on:click=&quot;clearList&quot;&amp;gt;Clear List&amp;lt;/button&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;!-- Unordered list for holding our todo items --&amp;gt; &amp;lt;ul class=&quot;list&quot;&amp;gt; &amp;lt;li v-for=&quot;task in taskList&quot; v-bind:class=&quot;{done: task.checked}&quot;&amp;gt; &amp;lt;input type=&quot;checkbox&quot; class=&quot;checkbox&quot; v-model=&quot;task.checked&quot;&amp;gt; &amp;lt;label for=&quot;checkbox&quot;&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;button class=&quot;delete&quot; v-on:click=&quot;removeTask(task)&quot;&amp;gt;X&amp;lt;/button&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;!-- This stringifies the contents of the data object and displays it on the page --&amp;gt; &amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;/div&amp;gt; The main input with button : look at the contents of the &amp;lt;section class=&quot;panel&quot;&amp;gt; element. So we have a checkbox (which is not in the brief above the code), an input and a button. All this is in HTML..but whats the v-on and v-bind and v-model? These are called directives. They are very very important and so, we should understand what they do. These are event listeners and provide binding with the data source or functions that we will build. Here, we have a few directives. I will list them and provide an explanation: v-bind: This binds an attribute of the element with the output of a function, which is constantly evaluated, or some data element. here we see v-bind:checked=&quot;areAllSelected&quot; - this binds the output of a constantly evaluated function areAllSelected to the checked property of the checkbox. v-on: This is an event listener. This executes a function on the occurrence of that event. v-on:click=&quot;selectAll&quot; - here the function selectAll is executed when the click event executes on this element. Another instance of the v-on is the v-on:keyup.enter=&quot;addTask&quot;. Intuitively, you can say that this is supposed to execute addTask on the event of the enter button is released. v-model: This binds the data to the element value when that value is an attribute. We will now go through the rest of the code - the ul element. We encounter something different here - the v-for=&quot;task in taskList&quot; bit. This is a ‘for’ loop. it loops through each element ( called task ) in the data taskList. I think we can now go thru the Javascript and will find it self-explanatory.</summary></entry></feed>